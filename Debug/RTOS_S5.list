
RTOS_S5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d4  080073d4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080073d4  080073d4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073d4  080073d4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080073dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000015e8  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001648  20001648  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cb9d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003db0  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f0  00000000  00000000  00040a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012c0  00000000  00000000  00042210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210b5  00000000  00000000  000434d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fc8f  00000000  00000000  00064585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c54ab  00000000  00000000  00084214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a48  00000000  00000000  001496c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00150108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007110 	.word	0x08007110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007110 	.word	0x08007110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	2000011c 	.word	0x2000011c

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b09c      	sub	sp, #112	; 0x70
 80002b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fdb3 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f875 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f9a5 	bl	8000610 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c6:	f000 f8d3 	bl	8000470 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002ca:	f000 f911 	bl	80004f0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002ce:	f000 f97d 	bl	80005cc <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002d2:	f000 f94b 	bl	800056c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  /********************* Create Queue *********************/
  ST_Queue_Handler = xQueueCreate(2, sizeof(qstruct));
 80002d6:	2200      	movs	r2, #0
 80002d8:	210c      	movs	r1, #12
 80002da:	2002      	movs	r0, #2
 80002dc:	f004 fbe8 	bl	8004ab0 <xQueueGenericCreate>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4a25      	ldr	r2, [pc, #148]	; (8000378 <main+0xc4>)
 80002e4:	6013      	str	r3, [r2, #0]
  // Check Queue is created successfully or not!
  if(ST_Queue_Handler == 0) {
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <main+0x5e>
	  uint8_t queue_data[100];
	  sprintf(queue_data, "Unable to create Structured queue!\r\n\r\n");
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4922      	ldr	r1, [pc, #136]	; (800037c <main+0xc8>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 fa12 	bl	800671c <siprintf>
	  HAL_UART_Transmit(&huart1, queue_data, strlen(queue_data), HAL_MAX_DELAY);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff68 	bl	80001d0 <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	b29a      	uxth	r2, r3
 8000304:	1d39      	adds	r1, r7, #4
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	481d      	ldr	r0, [pc, #116]	; (8000380 <main+0xcc>)
 800030c:	f003 fab4 	bl	8003878 <HAL_UART_Transmit>
 8000310:	e010      	b.n	8000334 <main+0x80>
  }
  else {
	  uint8_t queue_data[100];
	  sprintf(queue_data, "Structured queue created successfully!!\r\n\r\n");
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	491b      	ldr	r1, [pc, #108]	; (8000384 <main+0xd0>)
 8000316:	4618      	mov	r0, r3
 8000318:	f006 fa00 	bl	800671c <siprintf>
	  HAL_UART_Transmit(&huart1, queue_data, strlen(queue_data), HAL_MAX_DELAY);
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff56 	bl	80001d0 <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	f04f 33ff 	mov.w	r3, #4294967295
 800032e:	4814      	ldr	r0, [pc, #80]	; (8000380 <main+0xcc>)
 8000330:	f003 faa2 	bl	8003878 <HAL_UART_Transmit>
  }


  /********************* Create Tasks *********************/
  xTaskCreate(Sender1_TASK_Start, "SENDER1", 128, NULL, 2, &Sender1_Task_Handler);
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <main+0xd4>)
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	2302      	movs	r3, #2
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2300      	movs	r3, #0
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	4912      	ldr	r1, [pc, #72]	; (800038c <main+0xd8>)
 8000342:	4813      	ldr	r0, [pc, #76]	; (8000390 <main+0xdc>)
 8000344:	f004 ff5c 	bl	8005200 <xTaskCreate>
  xTaskCreate(Sender2_TASK_Start, "SENDER2", 128, NULL, 2, &Sender2_Task_Handler);
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <main+0xe0>)
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	2302      	movs	r3, #2
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2300      	movs	r3, #0
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	4910      	ldr	r1, [pc, #64]	; (8000398 <main+0xe4>)
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <main+0xe8>)
 8000358:	f004 ff52 	bl	8005200 <xTaskCreate>
  xTaskCreate(Receiver_TASK_Start, "RECEIVER", 128, NULL, 1, &Receiver_Task_Handler);
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <main+0xec>)
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	2301      	movs	r3, #1
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2300      	movs	r3, #0
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	490e      	ldr	r1, [pc, #56]	; (80003a4 <main+0xf0>)
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0xf4>)
 800036c:	f004 ff48 	bl	8005200 <xTaskCreate>

  /********************* Scheduler *********************/
  vTaskStartScheduler();
 8000370:	f005 f8c0 	bl	80054f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	e7fe      	b.n	8000374 <main+0xc0>
 8000376:	bf00      	nop
 8000378:	20000748 	.word	0x20000748
 800037c:	08007128 	.word	0x08007128
 8000380:	200003d4 	.word	0x200003d4
 8000384:	08007150 	.word	0x08007150
 8000388:	2000074c 	.word	0x2000074c
 800038c:	0800717c 	.word	0x0800717c
 8000390:	0800070d 	.word	0x0800070d
 8000394:	20000750 	.word	0x20000750
 8000398:	08007184 	.word	0x08007184
 800039c:	080007e1 	.word	0x080007e1
 80003a0:	20000754 	.word	0x20000754
 80003a4:	0800718c 	.word	0x0800718c
 80003a8:	080008b5 	.word	0x080008b5

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09e      	sub	sp, #120	; 0x78
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f006 f9ce 	bl	800675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	223c      	movs	r2, #60	; 0x3c
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f006 f9c0 	bl	800675c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003dc:	2303      	movs	r3, #3
 80003de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2310      	movs	r3, #16
 80003f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000400:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fa26 	bl	8001858 <HAL_RCC_OscConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000412:	f000 fab7 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000416:	230f      	movs	r3, #15
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041a:	2302      	movs	r3, #2
 800041c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fa4e 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800043e:	f000 faa1 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <SystemClock_Config+0xc0>)
 8000444:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800044e:	2300      	movs	r3, #0
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	4618      	mov	r0, r3
 8000456:	f002 fca5 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000460:	f000 fa90 	bl	8000984 <Error_Handler>
  }
}
 8000464:	bf00      	nop
 8000466:	3778      	adds	r7, #120	; 0x78
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	00020021 	.word	0x00020021

08000470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_I2C1_Init+0x74>)
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <MX_I2C1_Init+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_I2C1_Init+0x74>)
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <MX_I2C1_Init+0x7c>)
 800047e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_I2C1_Init+0x74>)
 8000488:	2201      	movs	r2, #1
 800048a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_I2C1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_I2C1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <MX_I2C1_Init+0x74>)
 80004ac:	f000 ffdc 	bl	8001468 <HAL_I2C_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b6:	f000 fa65 	bl	8000984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ba:	2100      	movs	r1, #0
 80004bc:	4809      	ldr	r0, [pc, #36]	; (80004e4 <MX_I2C1_Init+0x74>)
 80004be:	f001 f862 	bl	8001586 <HAL_I2CEx_ConfigAnalogFilter>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c8:	f000 fa5c 	bl	8000984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004cc:	2100      	movs	r1, #0
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_I2C1_Init+0x74>)
 80004d0:	f001 f8a4 	bl	800161c <HAL_I2CEx_ConfigDigitalFilter>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004da:	f000 fa53 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000031c 	.word	0x2000031c
 80004e8:	40005400 	.word	0x40005400
 80004ec:	2000090e 	.word	0x2000090e

080004f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_SPI1_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_SPI1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_SPI1_Init+0x74>)
 80004fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_SPI1_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_SPI1_Init+0x74>)
 800050a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800050e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_SPI1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_SPI1_Init+0x74>)
 800051e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000522:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_SPI1_Init+0x74>)
 8000526:	2208      	movs	r2, #8
 8000528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_SPI1_Init+0x74>)
 800053e:	2207      	movs	r2, #7
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_SPI1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_SPI1_Init+0x74>)
 800054a:	2208      	movs	r2, #8
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_SPI1_Init+0x74>)
 8000550:	f002 fdd8 	bl	8003104 <HAL_SPI_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 fa13 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000370 	.word	0x20000370
 8000568:	40013000 	.word	0x40013000

0800056c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000572:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <MX_USART1_UART_Init+0x5c>)
 8000574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000578:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800057c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART1_UART_Init+0x58>)
 80005b0:	f003 f914 	bl	80037dc <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ba:	f000 f9e3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200003d4 	.word	0x200003d4
 80005c8:	40013800 	.word	0x40013800

080005cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <MX_USB_PCD_Init+0x40>)
 80005d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005d8:	2208      	movs	r2, #8
 80005da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005de:	2202      	movs	r2, #2
 80005e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_USB_PCD_Init+0x3c>)
 80005f6:	f001 f85d 	bl	80016b4 <HAL_PCD_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000600:	f000 f9c0 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000045c 	.word	0x2000045c
 800060c:	40005c00 	.word	0x40005c00

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b37      	ldr	r3, [pc, #220]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a36      	ldr	r2, [pc, #216]	; (8000704 <MX_GPIO_Init+0xf4>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_GPIO_Init+0xf4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <MX_GPIO_Init+0xf4>)
 800065c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a24      	ldr	r2, [pc, #144]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_GPIO_Init+0xf4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <MX_GPIO_Init+0xf4>)
 800068c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_GPIO_Init+0xf4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800069e:	2200      	movs	r2, #0
 80006a0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006a4:	4818      	ldr	r0, [pc, #96]	; (8000708 <MX_GPIO_Init+0xf8>)
 80006a6:	f000 fec7 	bl	8001438 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006aa:	2337      	movs	r3, #55	; 0x37
 80006ac:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_GPIO_Init+0xf8>)
 80006c0:	f000 fd40 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006c4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006c8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <MX_GPIO_Init+0xf8>)
 80006de:	f000 fd31 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fd24 	bl	8001144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48001000 	.word	0x48001000

0800070c <Sender1_TASK_Start>:

/* USER CODE BEGIN 4 */
void Sender1_TASK_Start(void *args) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b09e      	sub	sp, #120	; 0x78
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	qstruct *ptr2struct;
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000714:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000718:	677b      	str	r3, [r7, #116]	; 0x74
	while(1) {
		uint8_t data[100];
		sprintf(data, "Entered Sender1 Task\r\n about to send to the queue\r\n\r\n");
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	492a      	ldr	r1, [pc, #168]	; (80007c8 <Sender1_TASK_Start+0xbc>)
 8000720:	4618      	mov	r0, r3
 8000722:	f005 fffb 	bl	800671c <siprintf>
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 010c 	add.w	r1, r7, #12
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <Sender1_TASK_Start+0xc0>)
 800073e:	f003 f89b 	bl	8003878 <HAL_UART_Transmit>

		/*************** Allocate Memory to the pointer of structure ***************/
		ptr2struct = pvPortMalloc(sizeof(qstruct));
 8000742:	200c      	movs	r0, #12
 8000744:	f005 fe10 	bl	8006368 <pvPortMalloc>
 8000748:	4603      	mov	r3, r0
 800074a:	673b      	str	r3, [r7, #112]	; 0x70

		/*************** Load data to the structure ***************/
		ptr2struct->counter = 1 + indx1;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <Sender1_TASK_Start+0xc4>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000752:	3201      	adds	r2, #1
 8000754:	605a      	str	r2, [r3, #4]
		ptr2struct->large_value = 1000 + indx1*10;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <Sender1_TASK_Start+0xc4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	b29a      	uxth	r2, r3
 8000766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000768:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800076c:	b292      	uxth	r2, r2
 800076e:	811a      	strh	r2, [r3, #8]
		ptr2struct->str = "A message from Sender1 Task!";
 8000770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <Sender1_TASK_Start+0xc8>)
 8000774:	601a      	str	r2, [r3, #0]

		/*************** Send data to the queue ***************/
		if(xQueueSend(ST_Queue_Handler, &ptr2struct, portMAX_DELAY) == pdPASS) {
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <Sender1_TASK_Start+0xcc>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800077e:	2300      	movs	r3, #0
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	f004 f9f2 	bl	8004b6c <xQueueGenericSend>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d113      	bne.n	80007b6 <Sender1_TASK_Start+0xaa>
			sprintf(data, "Successfully sent the struct to the queue\r\nLeaving Sender1 Task\r\n\r\n\r\n");
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4912      	ldr	r1, [pc, #72]	; (80007dc <Sender1_TASK_Start+0xd0>)
 8000794:	4618      	mov	r0, r3
 8000796:	f005 ffc1 	bl	800671c <siprintf>
			HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f107 010c 	add.w	r1, r7, #12
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <Sender1_TASK_Start+0xc0>)
 80007b2:	f003 f861 	bl	8003878 <HAL_UART_Transmit>
		}

		indx1++;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <Sender1_TASK_Start+0xc4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <Sender1_TASK_Start+0xc4>)
 80007be:	6013      	str	r3, [r2, #0]

		vTaskDelay(TickDelay);
 80007c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80007c2:	f004 fe63 	bl	800548c <vTaskDelay>
	while(1) {
 80007c6:	e7a8      	b.n	800071a <Sender1_TASK_Start+0xe>
 80007c8:	08007198 	.word	0x08007198
 80007cc:	200003d4 	.word	0x200003d4
 80007d0:	20000758 	.word	0x20000758
 80007d4:	080071d0 	.word	0x080071d0
 80007d8:	20000748 	.word	0x20000748
 80007dc:	080071f0 	.word	0x080071f0

080007e0 <Sender2_TASK_Start>:
	}
}

void Sender2_TASK_Start(void *args) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09e      	sub	sp, #120	; 0x78
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	qstruct *ptr2struct;
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80007e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ec:	677b      	str	r3, [r7, #116]	; 0x74
	while(1) {
		uint8_t data[100];
		sprintf(data, "Entered Sender2 Task\r\n about to send to the queue\r\n\r\n");
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	492a      	ldr	r1, [pc, #168]	; (800089c <Sender2_TASK_Start+0xbc>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 ff91 	bl	800671c <siprintf>
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce6 	bl	80001d0 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	f107 010c 	add.w	r1, r7, #12
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <Sender2_TASK_Start+0xc0>)
 8000812:	f003 f831 	bl	8003878 <HAL_UART_Transmit>

		/*************** Allocate Memory to the pointer of structure ***************/
		ptr2struct = pvPortMalloc(sizeof(qstruct));
 8000816:	200c      	movs	r0, #12
 8000818:	f005 fda6 	bl	8006368 <pvPortMalloc>
 800081c:	4603      	mov	r3, r0
 800081e:	673b      	str	r3, [r7, #112]	; 0x70

		/*************** Load data to the structure ***************/
		ptr2struct->counter = 1 + indx2;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <Sender2_TASK_Start+0xc4>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000826:	3201      	adds	r2, #1
 8000828:	605a      	str	r2, [r3, #4]
		ptr2struct->large_value = 2000 + indx2*20;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <Sender2_TASK_Start+0xc4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	b29a      	uxth	r2, r3
 800083a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800083c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8000840:	b292      	uxth	r2, r2
 8000842:	811a      	strh	r2, [r3, #8]
		ptr2struct->str = "A message from Sender2 Task!";
 8000844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <Sender2_TASK_Start+0xc8>)
 8000848:	601a      	str	r2, [r3, #0]

		/*************** Send data to the queue ***************/
		if(xQueueSend(ST_Queue_Handler, &ptr2struct, portMAX_DELAY) == pdPASS) {
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <Sender2_TASK_Start+0xcc>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000852:	2300      	movs	r3, #0
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	f004 f988 	bl	8004b6c <xQueueGenericSend>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d113      	bne.n	800088a <Sender2_TASK_Start+0xaa>
			sprintf(data, "Successfully sent the struct to the queue\r\nLeaving Sender2 Task\r\n\r\n\r\n");
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4912      	ldr	r1, [pc, #72]	; (80008b0 <Sender2_TASK_Start+0xd0>)
 8000868:	4618      	mov	r0, r3
 800086a:	f005 ff57 	bl	800671c <siprintf>
			HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fcac 	bl	80001d0 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <Sender2_TASK_Start+0xc0>)
 8000886:	f002 fff7 	bl	8003878 <HAL_UART_Transmit>
		}

		indx2++;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <Sender2_TASK_Start+0xc4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <Sender2_TASK_Start+0xc4>)
 8000892:	6013      	str	r3, [r2, #0]

		vTaskDelay(TickDelay);
 8000894:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000896:	f004 fdf9 	bl	800548c <vTaskDelay>
	while(1) {
 800089a:	e7a8      	b.n	80007ee <Sender2_TASK_Start+0xe>
 800089c:	08007238 	.word	0x08007238
 80008a0:	200003d4 	.word	0x200003d4
 80008a4:	2000075c 	.word	0x2000075c
 80008a8:	08007270 	.word	0x08007270
 80008ac:	20000748 	.word	0x20000748
 80008b0:	08007290 	.word	0x08007290

080008b4 <Receiver_TASK_Start>:
	}
}

void Receiver_TASK_Start(void *args) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a0      	sub	sp, #128	; 0x80
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
	qstruct *rptr2struct;
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 80008bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008c0:	677b      	str	r3, [r7, #116]	; 0x74
	char *ptr;

	while(1) {
		uint8_t data[100];
		sprintf(data, "Entered RECEIVER Task\r\n about to receive from the queue\r\n\r\n");
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	4922      	ldr	r1, [pc, #136]	; (8000950 <Receiver_TASK_Start+0x9c>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 ff27 	bl	800671c <siprintf>
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc7c 	bl	80001d0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 0108 	add.w	r1, r7, #8
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <Receiver_TASK_Start+0xa0>)
 80008e6:	f002 ffc7 	bl	8003878 <HAL_UART_Transmit>

		/*************** Receive data from the queue ***************/
		if(xQueueReceive(ST_Queue_Handler, &rptr2struct, portMAX_DELAY) == pdPASS) {
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <Receiver_TASK_Start+0xa4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fa36 	bl	8004d68 <xQueueReceive>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d11e      	bne.n	8000940 <Receiver_TASK_Start+0x8c>

			ptr = pvPortMalloc(200 * sizeof(char)); //allocate memory
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f005 fd30 	bl	8006368 <pvPortMalloc>
 8000908:	6738      	str	r0, [r7, #112]	; 0x70

			sprintf(ptr,
					"Received from Queue:\r\n Counter = %d\r\n Large Value = %u\r\n String = %s\r\n\r\n\r\n",
					rptr2struct->counter,
 800090a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
			sprintf(ptr,
 800090c:	685a      	ldr	r2, [r3, #4]
					rptr2struct->large_value,
 800090e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000910:	891b      	ldrh	r3, [r3, #8]
			sprintf(ptr,
 8000912:	4619      	mov	r1, r3
					rptr2struct->str);
 8000914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
			sprintf(ptr,
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	460b      	mov	r3, r1
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <Receiver_TASK_Start+0xa8>)
 800091e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000920:	f005 fefc 	bl	800671c <siprintf>

			HAL_UART_Transmit(&huart1, ptr, strlen(ptr), HAL_MAX_DELAY);
 8000924:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000926:	f7ff fc53 	bl	80001d0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <Receiver_TASK_Start+0xa0>)
 8000936:	f002 ff9f 	bl	8003878 <HAL_UART_Transmit>

			vPortFree(ptr); //free memory
 800093a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800093c:	f005 fdd8 	bl	80064f0 <vPortFree>

		}
		vPortFree(rptr2struct); //free memory (this will free sender1 and sender2 allocated memory)
 8000940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fdd4 	bl	80064f0 <vPortFree>

		vTaskDelay(TickDelay);
 8000948:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800094a:	f004 fd9f 	bl	800548c <vTaskDelay>
	while(1) {
 800094e:	e7b8      	b.n	80008c2 <Receiver_TASK_Start+0xe>
 8000950:	080072d8 	.word	0x080072d8
 8000954:	200003d4 	.word	0x200003d4
 8000958:	20000748 	.word	0x20000748
 800095c:	08007314 	.word	0x08007314

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 fa6d 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fb17 	bl	8001000 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_I2C_MspInit+0x7c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d127      	bne.n	8000a52 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a1a:	23c0      	movs	r3, #192	; 0xc0
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_I2C_MspInit+0x84>)
 8000a36:	f000 fb85 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_I2C_MspInit+0x80>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400

08000a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_SPI_MspInit+0x7c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d128      	bne.n	8000adc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_SPI_MspInit+0x80>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000aba:	23e0      	movs	r3, #224	; 0xe0
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aca:	2305      	movs	r3, #5
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 fb34 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_UART_MspInit+0x8c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12f      	bne.n	8000b6e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b5a:	f000 faf3 	bl	8001144 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 fa4c 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f000 fa65 	bl	8001038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000800 	.word	0x48000800

08000b84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_PCD_MspInit+0x80>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d129      	bne.n	8000bfa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000bbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000bd0:	230e      	movs	r3, #14
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f000 fab1 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_PCD_MspInit+0x84>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40005c00 	.word	0x40005c00
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_InitTick+0xcc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <HAL_InitTick+0xcc>)
 8000c22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <HAL_InitTick+0xcc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 020c 	add.w	r2, r7, #12
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f87e 	bl	8002d40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c44:	f002 f85a 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8000c48:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <HAL_InitTick+0xd0>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3b01      	subs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c58:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c80:	f002 faeb 	bl	800325a <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11b      	bne.n	8000cca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c94:	f002 fb42 	bl	800331c <HAL_TIM_Base_Start_IT>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d111      	bne.n	8000cca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f000 f9c6 	bl	8001038 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d808      	bhi.n	8000cc4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 f9a2 	bl	8001000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e002      	b.n	8000cca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3730      	adds	r7, #48	; 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	20000760 	.word	0x20000760
 8000ce4:	40012c00 	.word	0x40012c00
 8000ce8:	20000004 	.word	0x20000004

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d1e:	f002 fb67 	bl	80033f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000760 	.word	0x20000760

08000d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <USART1_IRQHandler+0x10>)
 8000d32:	f002 fe2b 	bl	800398c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200003d4 	.word	0x200003d4

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f005 fd52 	bl	8006818 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000a000 	.word	0x2000a000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200007ac 	.word	0x200007ac
 8000da8:	20001648 	.word	0x20001648

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f005 fd11 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fa57 	bl	80002b4 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e08:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e14:	080073dc 	.word	0x080073dc
  ldr r2, =_sbss
 8000e18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e1c:	20001648 	.word	0x20001648

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f8d8 	bl	8000fea <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f7ff fee6 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fda6 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200007b0 	.word	0x200007b0

08000e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200007b0 	.word	0x200007b0

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff4c 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001012:	f7ff ff61 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001016:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff ffb1 	bl	8000f84 <NVIC_EncodePriority>
 8001022:	4602      	mov	r2, r0
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff80 	bl	8000f30 <__NVIC_SetPriority>
}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff54 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001062:	2b02      	cmp	r3, #2
 8001064:	d008      	beq.n	8001078 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e020      	b.n	80010ba <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020e 	bic.w	r2, r2, #14
 8001086:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d005      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2204      	movs	r2, #4
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e027      	b.n	8001138 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	4798      	blx	r3
    } 
  }
  return status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e154      	b.n	80013fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8146 	beq.w	80013f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d017      	beq.n	8001222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d123      	bne.n	8001276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	6939      	ldr	r1, [r7, #16]
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0203 	and.w	r2, r3, #3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80a0 	beq.w	80013f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a53      	ldr	r2, [pc, #332]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d019      	beq.n	8001330 <HAL_GPIO_Init+0x1ec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x2e0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x1e8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1e4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_GPIO_Init+0x2e8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1e0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_GPIO_Init+0x2ec>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1dc>
 800131c:	2304      	movs	r3, #4
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001320:	2305      	movs	r3, #5
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001324:	2303      	movs	r3, #3
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001374:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f aea3 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e081      	b.n	800157e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff faa6 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2224      	movs	r2, #36	; 0x24
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	e006      	b.n	80014f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d104      	bne.n	8001502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69d9      	ldr	r1, [r3, #28]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b20      	cmp	r3, #32
 800159a:	d138      	bne.n	800160e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e032      	b.n	8001610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2224      	movs	r2, #36	; 0x24
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800160e:	2302      	movs	r3, #2
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	d139      	bne.n	80016a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800163c:	2302      	movs	r3, #2
 800163e:	e033      	b.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800166e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	b08b      	sub	sp, #44	; 0x2c
 80016b8:	af06      	add	r7, sp, #24
 80016ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0c4      	b.n	8001850 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fa52 	bl	8000b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2203      	movs	r2, #3
 80016e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 f886 	bl	80047fe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e040      	b.n	800177a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3301      	adds	r3, #1
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3303      	adds	r3, #3
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3338      	adds	r3, #56	; 0x38
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	333c      	adds	r3, #60	; 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	3340      	adds	r3, #64	; 0x40
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	d3b9      	bcc.n	80016f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e044      	b.n	8001814 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	f203 1369 	addw	r3, r3, #361	; 0x169
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3301      	adds	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3b5      	bcc.n	800178a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	687e      	ldr	r6, [r7, #4]
 8001826:	466d      	mov	r5, sp
 8001828:	f106 0410 	add.w	r4, r6, #16
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	602b      	str	r3, [r5, #0]
 8001834:	1d33      	adds	r3, r6, #4
 8001836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001838:	6838      	ldr	r0, [r7, #0]
 800183a:	f002 fffb 	bl	8004834 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800185e:	af00      	add	r7, sp, #0
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001868:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f001 b823 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 817d 	beq.w	8001b8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001894:	4bbc      	ldr	r3, [pc, #752]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00c      	beq.n	80018ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	4bb9      	ldr	r3, [pc, #740]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d15c      	bne.n	8001966 <HAL_RCC_OscConfig+0x10e>
 80018ac:	4bb6      	ldr	r3, [pc, #728]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d155      	bne.n	8001966 <HAL_RCC_OscConfig+0x10e>
 80018ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0x94>
 80018e6:	4ba8      	ldr	r3, [pc, #672]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e015      	b.n	8001918 <HAL_RCC_OscConfig+0xc0>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001908:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001914:	4b9c      	ldr	r3, [pc, #624]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001920:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001924:	fa92 f2a2 	rbit	r2, r2
 8001928:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800192c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f042 0220 	orr.w	r2, r2, #32
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f002 021f 	and.w	r2, r2, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 811f 	beq.w	8001b8c <HAL_RCC_OscConfig+0x334>
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 8116 	bne.w	8001b8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	f000 bfaf 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x12e>
 8001978:	4b83      	ldr	r3, [pc, #524]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a82      	ldr	r2, [pc, #520]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e036      	b.n	80019f4 <HAL_RCC_OscConfig+0x19c>
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x158>
 8001996:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7b      	ldr	r2, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a78      	ldr	r2, [pc, #480]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e021      	b.n	80019f4 <HAL_RCC_OscConfig+0x19c>
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x184>
 80019c2:	4b71      	ldr	r3, [pc, #452]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a70      	ldr	r2, [pc, #448]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b6e      	ldr	r3, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6d      	ldr	r2, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0x19c>
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f023 020f 	bic.w	r2, r3, #15
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	495f      	ldr	r1, [pc, #380]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d059      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fa2b 	bl	8000e78 <HAL_GetTick>
 8001a22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fa26 	bl	8000e78 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d902      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f000 bf43 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 8001a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_OscConfig+0x218>
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e015      	b.n	8001a9c <HAL_RCC_OscConfig+0x244>
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001aa4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aa8:	fa92 f2a2 	rbit	r2, r2
 8001aac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ab0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ab4:	fab2 f282 	clz	r2, r2
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f002 021f 	and.w	r2, r2, #31
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ab      	beq.n	8001a28 <HAL_RCC_OscConfig+0x1d0>
 8001ad0:	e05d      	b.n	8001b8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9d1 	bl	8000e78 <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff f9cc 	bl	8000e78 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d902      	bls.n	8001af2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 bee9 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 8001af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2cc>
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e015      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f8>
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_RCC_OscConfig+0x330>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b5c:	fa92 f2a2 	rbit	r2, r2
 8001b60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ab      	bne.n	8001adc <HAL_RCC_OscConfig+0x284>
 8001b84:	e003      	b.n	8001b8e <HAL_RCC_OscConfig+0x336>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 817d 	beq.w	8001e9e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ba4:	4ba6      	ldr	r3, [pc, #664]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb0:	4ba3      	ldr	r3, [pc, #652]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d172      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x44a>
 8001bbc:	4ba0      	ldr	r3, [pc, #640]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d16c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x44a>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3a0>
 8001bf2:	4b93      	ldr	r3, [pc, #588]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c8>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c1c:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2202      	movs	r2, #2
 8001c22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_RCC_OscConfig+0x410>
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f000 be2e 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	21f8      	movs	r1, #248	; 0xf8
 8001c7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c86:	fa91 f1a1 	rbit	r1, r1
 8001c8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c92:	fab1 f181 	clz	r1, r1
 8001c96:	b2c9      	uxtb	r1, r1
 8001c98:	408b      	lsls	r3, r1
 8001c9a:	4969      	ldr	r1, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca0:	e0fd      	b.n	8001e9e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8088 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x56c>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2301      	movs	r3, #1
 8001cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f8ca 	bl	8000e78 <HAL_GetTick>
 8001ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff f8c5 	bl	8000e78 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d902      	bls.n	8001d00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f000 bde2 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d8>
 8001d2a:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0x500>
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0af      	beq.n	8001cea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	21f8      	movs	r1, #248	; 0xf8
 8001da0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001da8:	fa91 f1a1 	rbit	r1, r1
 8001dac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001db0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001db4:	fab1 f181 	clz	r1, r1
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	408b      	lsls	r3, r1
 8001dbc:	4920      	ldr	r1, [pc, #128]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
 8001dc2:	e06c      	b.n	8001e9e <HAL_RCC_OscConfig+0x646>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	461a      	mov	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f842 	bl	8000e78 <HAL_GetTick>
 8001df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f83d 	bl	8000e78 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d902      	bls.n	8001e10 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	f000 bd5a 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d104      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5ec>
 8001e3a:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <HAL_RCC_OscConfig+0x5e8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e015      	b.n	8001e6c <HAL_RCC_OscConfig+0x614>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e68:	4bc8      	ldr	r3, [pc, #800]	; (800218c <HAL_RCC_OscConfig+0x934>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ad      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8110 	beq.w	80020d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d079      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x760>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4bab      	ldr	r3, [pc, #684]	; (8002190 <HAL_RCC_OscConfig+0x938>)
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2301      	movs	r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ffc3 	bl	8000e78 <HAL_GetTick>
 8001ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe ffbe 	bl	8000e78 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d902      	bls.n	8001f0e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	f000 bcdb 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f68:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x934>)
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f74:	2102      	movs	r1, #2
 8001f76:	6019      	str	r1, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f1a3 	rbit	r1, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f8e:	6019      	str	r1, [r3, #0]
  return result;
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0a0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x6a0>
 8001fb6:	e08d      	b.n	80020d4 <HAL_RCC_OscConfig+0x87c>
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fe4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCC_OscConfig+0x938>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ff3d 	bl	8000e78 <HAL_GetTick>
 8001ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff38 	bl	8000e78 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d902      	bls.n	800201a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	f000 bc55 	b.w	80028c4 <HAL_RCC_OscConfig+0x106c>
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x934>)
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002092:	2102      	movs	r1, #2
 8002094:	6019      	str	r1, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f1a3 	rbit	r1, r3
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020ac:	6019      	str	r1, [r3, #0]
  return result;
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d197      	bne.n	8002004 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 81a1 	beq.w	800242c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x934>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCC_OscConfig+0x934>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_RCC_OscConfig+0x934>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	61d3      	str	r3, [r2, #28]
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_OscConfig+0x934>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002122:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x93c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11a      	bne.n	800216c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_RCC_OscConfig+0x93c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x93c>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7fe fe99 	bl	8000e78 <HAL_GetTick>
 8002146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	e009      	b.n	8002160 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fe94 	bl	8000e78 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e3b1      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x93c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_OscConfig+0x940>
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_OscConfig+0x934>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a02      	ldr	r2, [pc, #8]	; (800218c <HAL_RCC_OscConfig+0x934>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e03c      	b.n	8002204 <HAL_RCC_OscConfig+0x9ac>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	10908120 	.word	0x10908120
 8002194:	40007000 	.word	0x40007000
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x96a>
 80021a8:	4bc1      	ldr	r3, [pc, #772]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4ac0      	ldr	r2, [pc, #768]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	4bbe      	ldr	r3, [pc, #760]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4abd      	ldr	r2, [pc, #756]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e020      	b.n	8002204 <HAL_RCC_OscConfig+0x9ac>
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x994>
 80021d2:	4bb7      	ldr	r3, [pc, #732]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4ab6      	ldr	r2, [pc, #728]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4bb4      	ldr	r3, [pc, #720]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4ab3      	ldr	r2, [pc, #716]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0x9ac>
 80021ec:	4bb0      	ldr	r3, [pc, #704]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4aaf      	ldr	r2, [pc, #700]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4bad      	ldr	r3, [pc, #692]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4aac      	ldr	r2, [pc, #688]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80021fe:	f023 0304 	bic.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8081 	beq.w	8002318 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe2f 	bl	8000e78 <HAL_GetTick>
 800221a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fe2a 	bl	8000e78 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e345      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002264:	2202      	movs	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800227e:	601a      	str	r2, [r3, #0]
  return result;
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002288:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0xa4c>
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0xa74>
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022d4:	2102      	movs	r1, #2
 80022d6:	6011      	str	r1, [r2, #0]
 80022d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	fa92 f1a2 	rbit	r1, r2
 80022e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022ee:	6011      	str	r1, [r2, #0]
  return result;
 80022f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d084      	beq.n	8002220 <HAL_RCC_OscConfig+0x9c8>
 8002316:	e07f      	b.n	8002418 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7fe fdae 	bl	8000e78 <HAL_GetTick>
 800231c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fda9 	bl	8000e78 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e2c4      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002342:	2202      	movs	r2, #2
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002380:	601a      	str	r2, [r3, #0]
  return result;
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800238a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0xb4e>
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	e013      	b.n	80023ce <HAL_RCC_OscConfig+0xb76>
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023d6:	2102      	movs	r1, #2
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	fa92 f1a2 	rbit	r1, r2
 80023e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023f0:	6011      	str	r1, [r2, #0]
  return result;
 80023f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d184      	bne.n	8002322 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002418:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 8002426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8242 	beq.w	80028c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_RCC_OscConfig+0xc58>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b08      	cmp	r3, #8
 8002448:	f000 8213 	beq.w	8002872 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b02      	cmp	r3, #2
 800245a:	f040 8162 	bne.w	8002722 <HAL_RCC_OscConfig+0xeca>
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800246a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002482:	601a      	str	r2, [r3, #0]
  return result;
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800248c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fce8 	bl	8000e78 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	e00c      	b.n	80024c8 <HAL_RCC_OscConfig+0xc70>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fce0 	bl	8000e78 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1fd      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ec:	601a      	str	r2, [r3, #0]
  return result;
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0xcba>
 800250c:	4bb0      	ldr	r3, [pc, #704]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e027      	b.n	8002562 <HAL_RCC_OscConfig+0xd0a>
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800251a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b9c      	ldr	r3, [pc, #624]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002566:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800256a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800256e:	6011      	str	r1, [r2, #0]
 8002570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002574:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	fa92 f1a2 	rbit	r1, r2
 800257e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002582:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002586:	6011      	str	r1, [r2, #0]
  return result;
 8002588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800258c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d182      	bne.n	80024b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	497f      	ldr	r1, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002604:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	2301      	movs	r3, #1
 800261a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fc2c 	bl	8000e78 <HAL_GetTick>
 8002620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e009      	b.n	800263a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fc27 	bl	8000e78 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e144      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0xe2c>
 800267e:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e027      	b.n	80026d4 <HAL_RCC_OscConfig+0xe7c>
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026e0:	6011      	str	r1, [r2, #0]
 80026e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	fa92 f1a2 	rbit	r1, r2
 80026f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026f8:	6011      	str	r1, [r2, #0]
  return result;
 80026fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fab2 f282 	clz	r2, r2
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f002 021f 	and.w	r2, r2, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d082      	beq.n	8002626 <HAL_RCC_OscConfig+0xdce>
 8002720:	e0cf      	b.n	80028c2 <HAL_RCC_OscConfig+0x106a>
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800272a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002750:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800275c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	2300      	movs	r3, #0
 8002766:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fb86 	bl	8000e78 <HAL_GetTick>
 800276c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fb81 	bl	8000e78 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e09e      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800278e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027aa:	601a      	str	r2, [r3, #0]
  return result;
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d104      	bne.n	80027d4 <HAL_RCC_OscConfig+0xf7c>
 80027ca:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <HAL_RCC_OscConfig+0xf78>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e029      	b.n	8002824 <HAL_RCC_OscConfig+0xfcc>
 80027d0:	40021000 	.word	0x40021000
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_OscConfig+0x1078>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002828:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800282c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002830:	6011      	str	r1, [r2, #0]
 8002832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002836:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	fa92 f1a2 	rbit	r1, r2
 8002840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002844:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002848:	6011      	str	r1, [r2, #0]
  return result;
 800284a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d180      	bne.n	8002772 <HAL_RCC_OscConfig+0xf1a>
 8002870:	e027      	b.n	80028c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01e      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x1078>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800288e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002892:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10b      	bne.n	80028be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	; 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e162      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	498b      	ldr	r1, [pc, #556]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e14a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	497f      	ldr	r1, [pc, #508]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80dc 	beq.w	8002b00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d13c      	bne.n	80029ca <HAL_RCC_ClockConfig+0xf6>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_RCC_ClockConfig+0xa6>
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	e00f      	b.n	800299a <HAL_RCC_ClockConfig+0xc6>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
 8002988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
 800298e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002996:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299e:	65ba      	str	r2, [r7, #88]	; 0x58
 80029a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d17b      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0f3      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d13c      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x178>
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_ClockConfig+0x128>
 80029f6:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_ClockConfig+0x148>
 80029fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a24:	fa92 f2a2 	rbit	r2, r2
 8002a28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d13a      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b2      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1a0>
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e00d      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1bc>
 8002a74:	2302      	movs	r3, #2
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	61ba      	str	r2, [r7, #24]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	617a      	str	r2, [r7, #20]
  return result;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e079      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	491a      	ldr	r1, [pc, #104]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe f9d2 	bl	8000e78 <HAL_GetTick>
 8002ad4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe f9ce 	bl	8000e78 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e061      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d214      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e040      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	491a      	ldr	r1, [pc, #104]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b76:	f000 f829 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	22f0      	movs	r2, #240	; 0xf0
 8002b86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	fa92 f2a2 	rbit	r2, r2
 8002b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	40d3      	lsrs	r3, r2
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe f82e 	bl	8000c0c <HAL_InitTick>
  
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3778      	adds	r7, #120	; 0x78
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08007368 	.word	0x08007368
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x30>
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x36>
 8002bfa:	e03c      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	e03c      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	607a      	str	r2, [r7, #4]
  return result;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	220f      	movs	r2, #15
 8002c30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	60fa      	str	r2, [r7, #12]
  return result;
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	40d3      	lsrs	r3, r2
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e004      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	623b      	str	r3, [r7, #32]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c78:	623b      	str	r3, [r7, #32]
      break;
 8002c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	08007380 	.word	0x08007380
 8002c98:	08007390 	.word	0x08007390
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cbe:	f7ff ffef 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ccc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	603a      	str	r2, [r7, #0]
  return result;
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08007378 	.word	0x08007378

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d02:	f7ff ffcd 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	603a      	str	r2, [r7, #0]
  return result;
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	40d3      	lsrs	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08007378 	.word	0x08007378

08002d40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCC_GetClockConfig+0x60>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0207 	and.w	r2, r3, #7
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40022000 	.word	0x40022000

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b092      	sub	sp, #72	; 0x48
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80d4 	beq.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f835 	bl	8000e78 <HAL_GetTick>
 8002e0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f831 	bl	8000e78 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e169      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8084 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d07c      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d04b      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fd ffe1 	bl	8000e78 <HAL_GetTick>
 8002eb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd ffdd 	bl	8000e78 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e113      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d108      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002efe:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	e00d      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	10908100 	.word	0x10908100
 8002f10:	2302      	movs	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	4b78      	ldr	r3, [pc, #480]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2202      	movs	r2, #2
 8002f22:	613a      	str	r2, [r7, #16]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0b7      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	496a      	ldr	r1, [pc, #424]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f7c:	4b60      	ldr	r3, [pc, #384]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	f023 0203 	bic.w	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	495d      	ldr	r1, [pc, #372]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4956      	ldr	r1, [pc, #344]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb8:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	494e      	ldr	r1, [pc, #312]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4947      	ldr	r1, [pc, #284]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	493f      	ldr	r1, [pc, #252]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003012:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f023 0220 	bic.w	r2, r3, #32
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4938      	ldr	r1, [pc, #224]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4930      	ldr	r1, [pc, #192]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	4929      	ldr	r1, [pc, #164]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	4921      	ldr	r1, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	491a      	ldr	r1, [pc, #104]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003098:	4313      	orrs	r3, r2
 800309a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	4912      	ldr	r1, [pc, #72]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	490b      	ldr	r1, [pc, #44]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3748      	adds	r7, #72	; 0x48
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e09d      	b.n	8003252 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003126:	d009      	beq.n	800313c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e005      	b.n	800313c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fc86 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800317c:	d902      	bls.n	8003184 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e002      	b.n	800318a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003188:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_Init+0xa0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	ea42 0103 	orr.w	r1, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0204 	and.w	r2, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003220:	ea42 0103 	orr.w	r1, r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003240:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e049      	b.n	8003300 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f841 	bl	8003308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 f9f1 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e04a      	b.n	80033ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d013      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d115      	bne.n	80033b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d015      	beq.n	80033c6 <HAL_TIM_Base_Start_IT+0xaa>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d011      	beq.n	80033c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	e008      	b.n	80033c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e000      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	00010007 	.word	0x00010007

080033f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0202 	mvn.w	r2, #2
 800341c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f905 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8f7 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f908 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0204 	mvn.w	r2, #4
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8db 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8cd 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8de 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0208 	mvn.w	r2, #8
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8b1 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8a3 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8b4 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b10      	cmp	r3, #16
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f887 	bl	8003642 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f879 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f88a 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0201 	mvn.w	r2, #1
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd f9f6 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f90a 	bl	80037b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8fd 	bl	80037c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f838 	bl	800366a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b20      	cmp	r3, #32
 8003606:	d10e      	bne.n	8003626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d107      	bne.n	8003626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0220 	mvn.w	r2, #32
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8bd 	bl	80037a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <TIM_Base_SetConfig+0x104>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00f      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369e:	d00b      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a39      	ldr	r2, [pc, #228]	; (8003788 <TIM_Base_SetConfig+0x108>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a38      	ldr	r2, [pc, #224]	; (800378c <TIM_Base_SetConfig+0x10c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a37      	ldr	r2, [pc, #220]	; (8003790 <TIM_Base_SetConfig+0x110>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <TIM_Base_SetConfig+0x104>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01b      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d017      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <TIM_Base_SetConfig+0x108>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	; (800378c <TIM_Base_SetConfig+0x10c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00f      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <TIM_Base_SetConfig+0x110>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <TIM_Base_SetConfig+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <TIM_Base_SetConfig+0x118>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <TIM_Base_SetConfig+0x11c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <TIM_Base_SetConfig+0x104>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00f      	beq.n	8003768 <TIM_Base_SetConfig+0xe8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a11      	ldr	r2, [pc, #68]	; (8003790 <TIM_Base_SetConfig+0x110>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0xe8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0xe8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <TIM_Base_SetConfig+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0xe8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <TIM_Base_SetConfig+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40013400 	.word	0x40013400
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800

080037a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e040      	b.n	8003870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f974 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fbbc 	bl	8003f98 <UART_SetConfig>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e022      	b.n	8003870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fd84 	bl	8004340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fe0b 	bl	8004484 <UART_CheckIdleState>
 800386e:	4603      	mov	r3, r0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388c:	2b20      	cmp	r3, #32
 800388e:	d178      	bne.n	8003982 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Transmit+0x24>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e071      	b.n	8003984 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2221      	movs	r2, #33	; 0x21
 80038ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ae:	f7fd fae3 	bl	8000e78 <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x68>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038e8:	e030      	b.n	800394c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fe6d 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e03c      	b.n	8003984 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391c:	b292      	uxth	r2, r2
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	3302      	adds	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e008      	b.n	800393a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b292      	uxth	r2, r2
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1c8      	bne.n	80038ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fe36 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e005      	b.n	8003984 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b0ba      	sub	sp, #232	; 0xe8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ba:	4013      	ands	r3, r2
 80039bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d115      	bne.n	80039f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00f      	beq.n	80039f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 82ab 	beq.w	8003f40 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
      }
      return;
 80039f2:	e2a5      	b.n	8003f40 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8117 	beq.w	8003c2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_UART_IRQHandler+0x298>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 810a 	beq.w	8003c2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d011      	beq.n	8003a48 <HAL_UART_IRQHandler+0xbc>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d011      	beq.n	8003a78 <HAL_UART_IRQHandler+0xec>
 8003a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2202      	movs	r2, #2
 8003a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x11c>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2204      	movs	r2, #4
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	f043 0202 	orr.w	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d017      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <HAL_UART_IRQHandler+0x18a>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8211 	beq.w	8003f44 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04f      	beq.n	8003c0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fd97 	bl	80046a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d141      	bne.n	8003c06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <HAL_UART_IRQHandler+0x29c>)
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fa6f 	bl	80010c6 <HAL_DMA_Abort_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d017      	beq.n	8003c1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00f      	b.n	8003c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9b4 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e00b      	b.n	8003c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9b0 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e007      	b.n	8003c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9ac 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c1c:	e192      	b.n	8003f44 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1e:	bf00      	nop
    return;
 8003c20:	e190      	b.n	8003f44 <HAL_UART_IRQHandler+0x5b8>
 8003c22:	bf00      	nop
 8003c24:	04000120 	.word	0x04000120
 8003c28:	0800476b 	.word	0x0800476b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 814b 	bne.w	8003ecc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8144 	beq.w	8003ecc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 813d 	beq.w	8003ecc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	f040 80b5 	bne.w	8003dd4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8164 	beq.w	8003f48 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f080 815c 	bcs.w	8003f48 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	f000 8086 	beq.w	8003db2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1da      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e1      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e3      	bne.n	8003d2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e4      	bne.n	8003d72 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd f951 	bl	8001054 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8d7 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dd2:	e0b9      	b.n	8003f48 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80ab 	beq.w	8003f4c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a6 	beq.w	8003f4c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e4      	bne.n	8003e00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	623b      	str	r3, [r7, #32]
   return(result);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e3      	bne.n	8003e36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e4      	bne.n	8003e82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f85b 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eca:	e03f      	b.n	8003f4c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x56a>
 8003ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fc7b 	bl	80047ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ef4:	e02d      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01c      	beq.n	8003f50 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
    }
    return;
 8003f1e:	e017      	b.n	8003f50 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d012      	beq.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00c      	beq.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fc2c 	bl	8004796 <UART_EndTransmit_IT>
    return;
 8003f3e:	e008      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f40:	bf00      	nop
 8003f42:	e006      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f44:	bf00      	nop
 8003f46:	e004      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f50:	bf00      	nop
  }

}
 8003f52:	37e8      	adds	r7, #232	; 0xe8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fc6:	f023 030c 	bic.w	r3, r3, #12
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4aa7      	ldr	r2, [pc, #668]	; (80042b0 <UART_SetConfig+0x318>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d120      	bne.n	800405a <UART_SetConfig+0xc2>
 8004018:	4ba6      	ldr	r3, [pc, #664]	; (80042b4 <UART_SetConfig+0x31c>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b03      	cmp	r3, #3
 8004022:	d817      	bhi.n	8004054 <UART_SetConfig+0xbc>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x94>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004049 	.word	0x08004049
 8004034:	0800404f 	.word	0x0800404f
 8004038:	08004043 	.word	0x08004043
 800403c:	2301      	movs	r3, #1
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e0b5      	b.n	80041ae <UART_SetConfig+0x216>
 8004042:	2302      	movs	r3, #2
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e0b2      	b.n	80041ae <UART_SetConfig+0x216>
 8004048:	2304      	movs	r3, #4
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e0af      	b.n	80041ae <UART_SetConfig+0x216>
 800404e:	2308      	movs	r3, #8
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e0ac      	b.n	80041ae <UART_SetConfig+0x216>
 8004054:	2310      	movs	r3, #16
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e0a9      	b.n	80041ae <UART_SetConfig+0x216>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a96      	ldr	r2, [pc, #600]	; (80042b8 <UART_SetConfig+0x320>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d124      	bne.n	80040ae <UART_SetConfig+0x116>
 8004064:	4b93      	ldr	r3, [pc, #588]	; (80042b4 <UART_SetConfig+0x31c>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800406c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004070:	d011      	beq.n	8004096 <UART_SetConfig+0xfe>
 8004072:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004076:	d817      	bhi.n	80040a8 <UART_SetConfig+0x110>
 8004078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800407c:	d011      	beq.n	80040a2 <UART_SetConfig+0x10a>
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004082:	d811      	bhi.n	80040a8 <UART_SetConfig+0x110>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <UART_SetConfig+0xf8>
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d006      	beq.n	800409c <UART_SetConfig+0x104>
 800408e:	e00b      	b.n	80040a8 <UART_SetConfig+0x110>
 8004090:	2300      	movs	r3, #0
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e08b      	b.n	80041ae <UART_SetConfig+0x216>
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e088      	b.n	80041ae <UART_SetConfig+0x216>
 800409c:	2304      	movs	r3, #4
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e085      	b.n	80041ae <UART_SetConfig+0x216>
 80040a2:	2308      	movs	r3, #8
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e082      	b.n	80041ae <UART_SetConfig+0x216>
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e07f      	b.n	80041ae <UART_SetConfig+0x216>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a82      	ldr	r2, [pc, #520]	; (80042bc <UART_SetConfig+0x324>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d124      	bne.n	8004102 <UART_SetConfig+0x16a>
 80040b8:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <UART_SetConfig+0x31c>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040c4:	d011      	beq.n	80040ea <UART_SetConfig+0x152>
 80040c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040ca:	d817      	bhi.n	80040fc <UART_SetConfig+0x164>
 80040cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040d0:	d011      	beq.n	80040f6 <UART_SetConfig+0x15e>
 80040d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040d6:	d811      	bhi.n	80040fc <UART_SetConfig+0x164>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <UART_SetConfig+0x14c>
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	d006      	beq.n	80040f0 <UART_SetConfig+0x158>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x164>
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e061      	b.n	80041ae <UART_SetConfig+0x216>
 80040ea:	2302      	movs	r3, #2
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e05e      	b.n	80041ae <UART_SetConfig+0x216>
 80040f0:	2304      	movs	r3, #4
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e05b      	b.n	80041ae <UART_SetConfig+0x216>
 80040f6:	2308      	movs	r3, #8
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e058      	b.n	80041ae <UART_SetConfig+0x216>
 80040fc:	2310      	movs	r3, #16
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e055      	b.n	80041ae <UART_SetConfig+0x216>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <UART_SetConfig+0x328>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d124      	bne.n	8004156 <UART_SetConfig+0x1be>
 800410c:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <UART_SetConfig+0x31c>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004118:	d011      	beq.n	800413e <UART_SetConfig+0x1a6>
 800411a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800411e:	d817      	bhi.n	8004150 <UART_SetConfig+0x1b8>
 8004120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004124:	d011      	beq.n	800414a <UART_SetConfig+0x1b2>
 8004126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800412a:	d811      	bhi.n	8004150 <UART_SetConfig+0x1b8>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <UART_SetConfig+0x1a0>
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004134:	d006      	beq.n	8004144 <UART_SetConfig+0x1ac>
 8004136:	e00b      	b.n	8004150 <UART_SetConfig+0x1b8>
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e037      	b.n	80041ae <UART_SetConfig+0x216>
 800413e:	2302      	movs	r3, #2
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e034      	b.n	80041ae <UART_SetConfig+0x216>
 8004144:	2304      	movs	r3, #4
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e031      	b.n	80041ae <UART_SetConfig+0x216>
 800414a:	2308      	movs	r3, #8
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e02e      	b.n	80041ae <UART_SetConfig+0x216>
 8004150:	2310      	movs	r3, #16
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e02b      	b.n	80041ae <UART_SetConfig+0x216>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <UART_SetConfig+0x32c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d124      	bne.n	80041aa <UART_SetConfig+0x212>
 8004160:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <UART_SetConfig+0x31c>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800416c:	d011      	beq.n	8004192 <UART_SetConfig+0x1fa>
 800416e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004172:	d817      	bhi.n	80041a4 <UART_SetConfig+0x20c>
 8004174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004178:	d011      	beq.n	800419e <UART_SetConfig+0x206>
 800417a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800417e:	d811      	bhi.n	80041a4 <UART_SetConfig+0x20c>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <UART_SetConfig+0x1f4>
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004188:	d006      	beq.n	8004198 <UART_SetConfig+0x200>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x20c>
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e00d      	b.n	80041ae <UART_SetConfig+0x216>
 8004192:	2302      	movs	r3, #2
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e00a      	b.n	80041ae <UART_SetConfig+0x216>
 8004198:	2304      	movs	r3, #4
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e007      	b.n	80041ae <UART_SetConfig+0x216>
 800419e:	2308      	movs	r3, #8
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e004      	b.n	80041ae <UART_SetConfig+0x216>
 80041a4:	2310      	movs	r3, #16
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e001      	b.n	80041ae <UART_SetConfig+0x216>
 80041aa:	2310      	movs	r3, #16
 80041ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d15b      	bne.n	8004270 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d827      	bhi.n	800420e <UART_SetConfig+0x276>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x22c>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004207 	.word	0x08004207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7fe fd66 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e013      	b.n	8004218 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7fe fd84 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 80041f4:	61b8      	str	r0, [r7, #24]
        break;
 80041f6:	e00f      	b.n	8004218 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <UART_SetConfig+0x330>)
 80041fa:	61bb      	str	r3, [r7, #24]
        break;
 80041fc:	e00c      	b.n	8004218 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe fce5 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004202:	61b8      	str	r0, [r7, #24]
        break;
 8004204:	e008      	b.n	8004218 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	61bb      	str	r3, [r7, #24]
        break;
 800420c:	e004      	b.n	8004218 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	77bb      	strb	r3, [r7, #30]
        break;
 8004216:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8082 	beq.w	8004324 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	005a      	lsls	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d916      	bls.n	800426a <UART_SetConfig+0x2d2>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d212      	bcs.n	800426a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f023 030f 	bic.w	r3, r3, #15
 800424c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	b29a      	uxth	r2, r3
 800425a:	89fb      	ldrh	r3, [r7, #14]
 800425c:	4313      	orrs	r3, r2
 800425e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	89fa      	ldrh	r2, [r7, #14]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	e05c      	b.n	8004324 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	77bb      	strb	r3, [r7, #30]
 800426e:	e059      	b.n	8004324 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004270:	7ffb      	ldrb	r3, [r7, #31]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d835      	bhi.n	80042e2 <UART_SetConfig+0x34a>
 8004276:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x2e4>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042cd 	.word	0x080042cd
 8004288:	080042e3 	.word	0x080042e3
 800428c:	080042d3 	.word	0x080042d3
 8004290:	080042e3 	.word	0x080042e3
 8004294:	080042e3 	.word	0x080042e3
 8004298:	080042e3 	.word	0x080042e3
 800429c:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7fe fd0a 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 80042a4:	61b8      	str	r0, [r7, #24]
        break;
 80042a6:	e021      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7fe fd28 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 80042ac:	61b8      	str	r0, [r7, #24]
        break;
 80042ae:	e01d      	b.n	80042ec <UART_SetConfig+0x354>
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40004400 	.word	0x40004400
 80042bc:	40004800 	.word	0x40004800
 80042c0:	40004c00 	.word	0x40004c00
 80042c4:	40005000 	.word	0x40005000
 80042c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <UART_SetConfig+0x3a4>)
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e00c      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe fc7b 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 80042d6:	61b8      	str	r0, [r7, #24]
        break;
 80042d8:	e008      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	61bb      	str	r3, [r7, #24]
        break;
 80042e0:	e004      	b.n	80042ec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ea:	bf00      	nop
    }

    if (pclk != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085a      	lsrs	r2, r3, #1
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d909      	bls.n	8004320 <UART_SetConfig+0x388>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d205      	bcs.n	8004320 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e001      	b.n	8004324 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004330:	7fbb      	ldrb	r3, [r7, #30]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	007a1200 	.word	0x007a1200

08004340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443e:	d10a      	bne.n	8004456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b098      	sub	sp, #96	; 0x60
 8004488:	af02      	add	r7, sp, #8
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004494:	f7fc fcf0 	bl	8000e78 <HAL_GetTick>
 8004498:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d12e      	bne.n	8004506 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b0:	2200      	movs	r2, #0
 80044b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f88c 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d021      	beq.n	8004506 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
 80044e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e6      	bne.n	80044c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e062      	b.n	80045cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d149      	bne.n	80045a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f856 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03c      	beq.n	80045a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	623b      	str	r3, [r7, #32]
   return(result);
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	633b      	str	r3, [r7, #48]	; 0x30
 800454e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e6      	bne.n	800452e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3308      	adds	r3, #8
 800457e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004580:	61fa      	str	r2, [r7, #28]
 8004582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	617b      	str	r3, [r7, #20]
   return(result);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e011      	b.n	80045cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3758      	adds	r7, #88	; 0x58
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e4:	e049      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d045      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fc fc43 	bl	8000e78 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e048      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d031      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d110      	bne.n	8004646 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2208      	movs	r2, #8
 800462a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f838 	bl	80046a2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2208      	movs	r2, #8
 8004636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e029      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004654:	d111      	bne.n	800467a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800465e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f81e 	bl	80046a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e00f      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	429a      	cmp	r2, r3
 8004696:	d0a6      	beq.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b095      	sub	sp, #84	; 0x54
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	643b      	str	r3, [r7, #64]	; 0x40
 80046ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e6      	bne.n	80046aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	2b01      	cmp	r3, #1
 8004716:	d118      	bne.n	800474a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	60bb      	str	r3, [r7, #8]
   return(result);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0310 	bic.w	r3, r3, #16
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	613b      	str	r3, [r7, #16]
   return(result);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e6      	bne.n	8004718 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800475e:	bf00      	nop
 8004760:	3754      	adds	r7, #84	; 0x54
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fbef 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fbbb 	bl	8003f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004806:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800480a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	b29b      	uxth	r3, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	4013      	ands	r3, r2
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 0014 	add.w	r0, r7, #20
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	b004      	add	sp, #16
 8004874:	4770      	bx	lr

08004876 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 0208 	add.w	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 0208 	add.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f103 0208 	add.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d103      	bne.n	8004938 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e00c      	b.n	8004952 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3308      	adds	r3, #8
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e002      	b.n	8004946 <vListInsert+0x2e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d2f6      	bcs.n	8004940 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d103      	bne.n	80049be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a0a:	f001 fbcb 	bl	80061a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ff99 	bl	80059a4 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <xQueueGenericReset+0xcc>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e009      	b.n	8004a9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fef1 	bl	8004876 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff feec 	bl	8004876 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 fbb1 	bl	8006204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e004      	b.n	8004af0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3348      	adds	r3, #72	; 0x48
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fc37 	bl	8006368 <pvPortMalloc>
 8004afa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00f      	beq.n	8004b22 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3348      	adds	r3, #72	; 0x48
 8004b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f805 	bl	8004b2c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b22:	69bb      	ldr	r3, [r7, #24]
	}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	69b8      	ldr	r0, [r7, #24]
 8004b5e:	f7ff ff3f 	bl	80049e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08e      	sub	sp, #56	; 0x38
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericSend+0x32>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <xQueueGenericSend+0x40>
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <xQueueGenericSend+0x44>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <xQueueGenericSend+0x46>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <xQueueGenericSend+0x60>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d103      	bne.n	8004bda <xQueueGenericSend+0x6e>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <xQueueGenericSend+0x72>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xQueueGenericSend+0x74>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <xQueueGenericSend+0x8e>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	623b      	str	r3, [r7, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bfa:	f001 f899 	bl	8005d30 <xTaskGetSchedulerState>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <xQueueGenericSend+0x9e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSend+0xa2>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSend+0xa4>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fb      	str	r3, [r7, #28]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c2a:	f001 fabb 	bl	80061a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <xQueueGenericSend+0xd4>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d129      	bne.n	8004c94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c46:	f000 f96f 	bl	8004f28 <prvCopyDataToQueue>
 8004c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	3324      	adds	r3, #36	; 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fea3 	bl	80059a4 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c64:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	e00a      	b.n	8004c8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c8c:	f001 faba 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e063      	b.n	8004d5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c9a:	f001 fab3 	bl	8006204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e05c      	b.n	8004d5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fedb 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb6:	f001 faa5 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cba:	f000 fc85 	bl	80055c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cbe:	f001 fa71 	bl	80061a4 <vPortEnterCritical>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <xQueueGenericSend+0x16c>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSend+0x182>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cee:	f001 fa89 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 feca 	bl	8005a94 <xTaskCheckForTimeOut>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d124      	bne.n	8004d50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d08:	f000 fa06 	bl	8005118 <prvIsQueueFull>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	3310      	adds	r3, #16
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fe1e 	bl	800595c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d22:	f000 f991 	bl	8005048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d26:	f000 fc5d 	bl	80055e4 <xTaskResumeAll>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f47f af7c 	bne.w	8004c2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	e772      	b.n	8004c2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d46:	f000 f97f 	bl	8005048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d4a:	f000 fc4b 	bl	80055e4 <xTaskResumeAll>
 8004d4e:	e76c      	b.n	8004c2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d52:	f000 f979 	bl	8005048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d56:	f000 fc45 	bl	80055e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d5a:	2300      	movs	r3, #0
		}
	}
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3738      	adds	r7, #56	; 0x38
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <xQueueReceive+0x30>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	623b      	str	r3, [r7, #32]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <xQueueReceive+0x3e>
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <xQueueReceive+0x42>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueReceive+0x44>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueReceive+0x5e>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fb      	str	r3, [r7, #28]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc6:	f000 ffb3 	bl	8005d30 <xTaskGetSchedulerState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <xQueueReceive+0x6e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xQueueReceive+0x72>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueReceive+0x74>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xQueueReceive+0x8e>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61bb      	str	r3, [r7, #24]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df6:	f001 f9d5 	bl	80061a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01f      	beq.n	8004e46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0a:	f000 f8f7 	bl	8004ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00f      	beq.n	8004e3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	3310      	adds	r3, #16
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fdbe 	bl	80059a4 <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <xQueueReceive+0x1bc>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e3e:	f001 f9e1 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e069      	b.n	8004f1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e4c:	f001 f9da 	bl	8006204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e062      	b.n	8004f1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fe02 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e68:	f001 f9cc 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e6c:	f000 fbac 	bl	80055c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e70:	f001 f998 	bl	80061a4 <vPortEnterCritical>
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e7a:	b25b      	sxtb	r3, r3
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d103      	bne.n	8004e8a <xQueueReceive+0x122>
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e90:	b25b      	sxtb	r3, r3
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d103      	bne.n	8004ea0 <xQueueReceive+0x138>
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea0:	f001 f9b0 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea4:	1d3a      	adds	r2, r7, #4
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fdf1 	bl	8005a94 <xTaskCheckForTimeOut>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d123      	bne.n	8004f00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eba:	f000 f917 	bl	80050ec <prvIsQueueEmpty>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	3324      	adds	r3, #36	; 0x24
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fd45 	bl	800595c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed4:	f000 f8b8 	bl	8005048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed8:	f000 fb84 	bl	80055e4 <xTaskResumeAll>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d189      	bne.n	8004df6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <xQueueReceive+0x1bc>)
 8004ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	e780      	b.n	8004df6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef6:	f000 f8a7 	bl	8005048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004efa:	f000 fb73 	bl	80055e4 <xTaskResumeAll>
 8004efe:	e77a      	b.n	8004df6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f000 f8a1 	bl	8005048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f06:	f000 fb6d 	bl	80055e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0c:	f000 f8ee 	bl	80050ec <prvIsQueueEmpty>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f43f af6f 	beq.w	8004df6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3730      	adds	r7, #48	; 0x30
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d14d      	bne.n	8004fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff0a 	bl	8005d6c <xTaskPriorityDisinherit>
 8004f58:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	e043      	b.n	8004fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d119      	bne.n	8004f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6898      	ldr	r0, [r3, #8]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	f001 fc7c 	bl	8006870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	441a      	add	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d32b      	bcc.n	8004fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	e026      	b.n	8004fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68d8      	ldr	r0, [r3, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	f001 fc62 	bl	8006870 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	425b      	negs	r3, r3
 8004fb6:	441a      	add	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d207      	bcs.n	8004fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d105      	bne.n	8004fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ff2:	697b      	ldr	r3, [r7, #20]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	441a      	add	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d303      	bcc.n	8005030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68d9      	ldr	r1, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	461a      	mov	r2, r3
 800503a:	6838      	ldr	r0, [r7, #0]
 800503c:	f001 fc18 	bl	8006870 <memcpy>
	}
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005050:	f001 f8a8 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800505a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800505c:	e011      	b.n	8005082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fc9a 	bl	80059a4 <xTaskRemoveFromEventList>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005076:	f000 fd6f 	bl	8005b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	3b01      	subs	r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005086:	2b00      	cmp	r3, #0
 8005088:	dce9      	bgt.n	800505e <prvUnlockQueue+0x16>
 800508a:	e000      	b.n	800508e <prvUnlockQueue+0x46>
					break;
 800508c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005096:	f001 f8b5 	bl	8006204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800509a:	f001 f883 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a6:	e011      	b.n	80050cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d012      	beq.n	80050d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3310      	adds	r3, #16
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fc75 	bl	80059a4 <xTaskRemoveFromEventList>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050c0:	f000 fd4a 	bl	8005b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dce9      	bgt.n	80050a8 <prvUnlockQueue+0x60>
 80050d4:	e000      	b.n	80050d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050e0:	f001 f890 	bl	8006204 <vPortExitCritical>
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f4:	f001 f856 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e001      	b.n	800510a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800510a:	f001 f87b 	bl	8006204 <vPortExitCritical>

	return xReturn;
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005120:	f001 f840 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	429a      	cmp	r2, r3
 800512e:	d102      	bne.n	8005136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e001      	b.n	800513a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800513a:	f001 f863 	bl	8006204 <vPortExitCritical>

	return xReturn;
 800513e:	68fb      	ldr	r3, [r7, #12]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af04      	add	r7, sp, #16
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	623b      	str	r3, [r7, #32]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xTaskCreateStatic+0x46>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	61fb      	str	r3, [r7, #28]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800518e:	23a0      	movs	r3, #160	; 0xa0
 8005190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2ba0      	cmp	r3, #160	; 0xa0
 8005196:	d00a      	beq.n	80051ae <xTaskCreateStatic+0x66>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	61bb      	str	r3, [r7, #24]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <xTaskCreateStatic+0xaa>
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051cc:	2300      	movs	r3, #0
 80051ce:	9303      	str	r3, [sp, #12]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f851 	bl	800528c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ec:	f000 f8e4 	bl	80053b8 <prvAddNewTaskToReadyList>
 80051f0:	e001      	b.n	80051f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051f6:	697b      	ldr	r3, [r7, #20]
	}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	; 0x30
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f001 f8a7 	bl	8006368 <pvPortMalloc>
 800521a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005222:	20a0      	movs	r0, #160	; 0xa0
 8005224:	f001 f8a0 	bl	8006368 <pvPortMalloc>
 8005228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
 8005236:	e005      	b.n	8005244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f001 f959 	bl	80064f0 <vPortFree>
 800523e:	e001      	b.n	8005244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d017      	beq.n	800527a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	2300      	movs	r3, #0
 8005256:	9303      	str	r3, [sp, #12]
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	9302      	str	r3, [sp, #8]
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f80f 	bl	800528c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800526e:	69f8      	ldr	r0, [r7, #28]
 8005270:	f000 f8a2 	bl	80053b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e002      	b.n	8005280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005280:	69bb      	ldr	r3, [r7, #24]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a4:	3b01      	subs	r3, #1
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e012      	b.n	8005300 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	7819      	ldrb	r1, [r3, #0]
 80052e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	3334      	adds	r3, #52	; 0x34
 80052ea:	460a      	mov	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d9e9      	bls.n	80052da <prvInitialiseNewTask+0x4e>
 8005306:	e000      	b.n	800530a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005308:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b06      	cmp	r3, #6
 8005316:	d901      	bls.n	800531c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005318:	2306      	movs	r3, #6
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	3304      	adds	r3, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fabf 	bl	80048b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	3318      	adds	r3, #24
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff faba 	bl	80048b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f1c3 0207 	rsb	r2, r3, #7
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	2200      	movs	r2, #0
 8005364:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	334c      	adds	r3, #76	; 0x4c
 800536c:	224c      	movs	r2, #76	; 0x4c
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f9f3 	bl	800675c <memset>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <prvInitialiseNewTask+0x120>)
 800537a:	651a      	str	r2, [r3, #80]	; 0x50
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <prvInitialiseNewTask+0x124>)
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <prvInitialiseNewTask+0x128>)
 8005386:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	69b8      	ldr	r0, [r7, #24]
 800538e:	f000 fdd9 	bl	8005f44 <pxPortInitialiseStack>
 8005392:	4602      	mov	r2, r0
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a4:	bf00      	nop
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20001500 	.word	0x20001500
 80053b0:	20001568 	.word	0x20001568
 80053b4:	200015d0 	.word	0x200015d0

080053b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c0:	f000 fef0 	bl	80061a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c4:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ce:	4b29      	ldr	r3, [pc, #164]	; (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053d6:	4a27      	ldr	r2, [pc, #156]	; (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d110      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e4:	f000 fbdc 	bl	8005ba0 <prvInitialiseTaskLists>
 80053e8:	e00d      	b.n	8005406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <prvAddNewTaskToReadyList+0xc0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d802      	bhi.n	8005406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <prvAddNewTaskToReadyList+0xbc>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <prvAddNewTaskToReadyList+0xc4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	4a1b      	ldr	r2, [pc, #108]	; (800547c <prvAddNewTaskToReadyList+0xc4>)
 800540e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <prvAddNewTaskToReadyList+0xc8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	4a18      	ldr	r2, [pc, #96]	; (8005480 <prvAddNewTaskToReadyList+0xc8>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <prvAddNewTaskToReadyList+0xcc>)
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7ff fa49 	bl	80048d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800543e:	f000 fee1 	bl	8006204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <prvAddNewTaskToReadyList+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00e      	beq.n	8005468 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvAddNewTaskToReadyList+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d207      	bcs.n	8005468 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <prvAddNewTaskToReadyList+0xd0>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	200008b4 	.word	0x200008b4
 8005474:	200007b4 	.word	0x200007b4
 8005478:	200008c0 	.word	0x200008c0
 800547c:	200008d0 	.word	0x200008d0
 8005480:	200008bc 	.word	0x200008bc
 8005484:	200007b8 	.word	0x200007b8
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <vTaskDelay+0x60>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <vTaskDelay+0x30>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054bc:	f000 f884 	bl	80055c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c0:	2100      	movs	r1, #0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fcd8 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054c8:	f000 f88c 	bl	80055e4 <xTaskResumeAll>
 80054cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <vTaskDelay+0x64>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200008dc 	.word	0x200008dc
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005502:	463a      	mov	r2, r7
 8005504:	1d39      	adds	r1, r7, #4
 8005506:	f107 0308 	add.w	r3, r7, #8
 800550a:	4618      	mov	r0, r3
 800550c:	f7fa feb8 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	9202      	str	r2, [sp, #8]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	2300      	movs	r3, #0
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	460a      	mov	r2, r1
 8005522:	4921      	ldr	r1, [pc, #132]	; (80055a8 <vTaskStartScheduler+0xb4>)
 8005524:	4821      	ldr	r0, [pc, #132]	; (80055ac <vTaskStartScheduler+0xb8>)
 8005526:	f7ff fe0f 	bl	8005148 <xTaskCreateStatic>
 800552a:	4603      	mov	r3, r0
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <vTaskStartScheduler+0xbc>)
 800552e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <vTaskStartScheduler+0xbc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e001      	b.n	8005542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d11b      	bne.n	8005580 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	613b      	str	r3, [r7, #16]
}
 800555a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <vTaskStartScheduler+0xc0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	334c      	adds	r3, #76	; 0x4c
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <vTaskStartScheduler+0xc4>)
 8005564:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <vTaskStartScheduler+0xc8>)
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <vTaskStartScheduler+0xcc>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <vTaskStartScheduler+0xd0>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800557a:	f000 fd71 	bl	8006060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800557e:	e00e      	b.n	800559e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d10a      	bne.n	800559e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	60fb      	str	r3, [r7, #12]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <vTaskStartScheduler+0xa8>
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	08007360 	.word	0x08007360
 80055ac:	08005b71 	.word	0x08005b71
 80055b0:	200008d8 	.word	0x200008d8
 80055b4:	200007b4 	.word	0x200007b4
 80055b8:	2000005c 	.word	0x2000005c
 80055bc:	200008d4 	.word	0x200008d4
 80055c0:	200008c0 	.word	0x200008c0
 80055c4:	200008b8 	.word	0x200008b8

080055c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <vTaskSuspendAll+0x18>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a03      	ldr	r2, [pc, #12]	; (80055e0 <vTaskSuspendAll+0x18>)
 80055d4:	6013      	str	r3, [r2, #0]
}
 80055d6:	bf00      	nop
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	200008dc 	.word	0x200008dc

080055e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <xTaskResumeAll+0x114>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <xTaskResumeAll+0x2c>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	603b      	str	r3, [r7, #0]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005610:	f000 fdc8 	bl	80061a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005614:	4b38      	ldr	r3, [pc, #224]	; (80056f8 <xTaskResumeAll+0x114>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <xTaskResumeAll+0x114>)
 800561c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <xTaskResumeAll+0x114>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d161      	bne.n	80056ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <xTaskResumeAll+0x118>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05d      	beq.n	80056ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562e:	e02e      	b.n	800568e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005630:	4b33      	ldr	r3, [pc, #204]	; (8005700 <xTaskResumeAll+0x11c>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3318      	adds	r3, #24
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f9a4 	bl	800498a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff f99f 	bl	800498a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <xTaskResumeAll+0x120>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <xTaskResumeAll+0x120>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <xTaskResumeAll+0x124>)
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff f92b 	bl	80048d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <xTaskResumeAll+0x128>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <xTaskResumeAll+0x12c>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568e:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <xTaskResumeAll+0x11c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cc      	bne.n	8005630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800569c:	f000 fb22 	bl	8005ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xTaskResumeAll+0x130>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ac:	f000 f836 	bl	800571c <xTaskIncrementTick>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <xTaskResumeAll+0x12c>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f1      	bne.n	80056ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <xTaskResumeAll+0x130>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xTaskResumeAll+0x12c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskResumeAll+0x134>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ea:	f000 fd8b 	bl	8006204 <vPortExitCritical>

	return xAlreadyYielded;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	200008dc 	.word	0x200008dc
 80056fc:	200008b4 	.word	0x200008b4
 8005700:	20000874 	.word	0x20000874
 8005704:	200008bc 	.word	0x200008bc
 8005708:	200007b8 	.word	0x200007b8
 800570c:	200007b4 	.word	0x200007b4
 8005710:	200008c8 	.word	0x200008c8
 8005714:	200008c4 	.word	0x200008c4
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005726:	4b51      	ldr	r3, [pc, #324]	; (800586c <xTaskIncrementTick+0x150>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 808d 	bne.w	800584a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005730:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <xTaskIncrementTick+0x154>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005738:	4a4d      	ldr	r2, [pc, #308]	; (8005870 <xTaskIncrementTick+0x154>)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d120      	bne.n	8005786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005744:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <xTaskIncrementTick+0x158>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <xTaskIncrementTick+0x48>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	603b      	str	r3, [r7, #0]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <xTaskIncrementTick+0x46>
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <xTaskIncrementTick+0x158>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	4b43      	ldr	r3, [pc, #268]	; (8005878 <xTaskIncrementTick+0x15c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a41      	ldr	r2, [pc, #260]	; (8005874 <xTaskIncrementTick+0x158>)
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <xTaskIncrementTick+0x15c>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <xTaskIncrementTick+0x160>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a3f      	ldr	r2, [pc, #252]	; (800587c <xTaskIncrementTick+0x160>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	f000 faaf 	bl	8005ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005786:	4b3e      	ldr	r3, [pc, #248]	; (8005880 <xTaskIncrementTick+0x164>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d34d      	bcc.n	800582c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <xTaskIncrementTick+0x158>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xTaskIncrementTick+0x82>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xTaskIncrementTick+0x84>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <xTaskIncrementTick+0x164>)
 80057a6:	f04f 32ff 	mov.w	r2, #4294967295
 80057aa:	601a      	str	r2, [r3, #0]
					break;
 80057ac:	e03e      	b.n	800582c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <xTaskIncrementTick+0x158>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d203      	bcs.n	80057ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c6:	4a2e      	ldr	r2, [pc, #184]	; (8005880 <xTaskIncrementTick+0x164>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]
						break;
 80057cc:	e02e      	b.n	800582c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff f8d9 	bl	800498a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3318      	adds	r3, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff f8d0 	bl	800498a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	2201      	movs	r2, #1
 80057f0:	409a      	lsls	r2, r3
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <xTaskIncrementTick+0x168>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	4a22      	ldr	r2, [pc, #136]	; (8005884 <xTaskIncrementTick+0x168>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <xTaskIncrementTick+0x16c>)
 800580a:	441a      	add	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f7ff f85c 	bl	80048d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <xTaskIncrementTick+0x170>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	429a      	cmp	r2, r3
 8005824:	d3b4      	bcc.n	8005790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582a:	e7b1      	b.n	8005790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <xTaskIncrementTick+0x170>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4915      	ldr	r1, [pc, #84]	; (8005888 <xTaskIncrementTick+0x16c>)
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d907      	bls.n	8005854 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e004      	b.n	8005854 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <xTaskIncrementTick+0x174>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <xTaskIncrementTick+0x174>)
 8005852:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xTaskIncrementTick+0x178>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005860:	697b      	ldr	r3, [r7, #20]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200008dc 	.word	0x200008dc
 8005870:	200008b8 	.word	0x200008b8
 8005874:	2000086c 	.word	0x2000086c
 8005878:	20000870 	.word	0x20000870
 800587c:	200008cc 	.word	0x200008cc
 8005880:	200008d4 	.word	0x200008d4
 8005884:	200008bc 	.word	0x200008bc
 8005888:	200007b8 	.word	0x200007b8
 800588c:	200007b4 	.word	0x200007b4
 8005890:	200008c4 	.word	0x200008c4
 8005894:	200008c8 	.word	0x200008c8

08005898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <vTaskSwitchContext+0xac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <vTaskSwitchContext+0xb0>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058ac:	e044      	b.n	8005938 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <vTaskSwitchContext+0xb0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <vTaskSwitchContext+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	f1c3 031f 	rsb	r3, r3, #31
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	4921      	ldr	r1, [pc, #132]	; (8005950 <vTaskSwitchContext+0xb8>)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vTaskSwitchContext+0x5a>
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4a14      	ldr	r2, [pc, #80]	; (8005950 <vTaskSwitchContext+0xb8>)
 8005900:	4413      	add	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3308      	adds	r3, #8
 8005916:	429a      	cmp	r2, r3
 8005918:	d104      	bne.n	8005924 <vTaskSwitchContext+0x8c>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <vTaskSwitchContext+0xbc>)
 800592c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <vTaskSwitchContext+0xbc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	334c      	adds	r3, #76	; 0x4c
 8005934:	4a08      	ldr	r2, [pc, #32]	; (8005958 <vTaskSwitchContext+0xc0>)
 8005936:	6013      	str	r3, [r2, #0]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	200008dc 	.word	0x200008dc
 8005948:	200008c8 	.word	0x200008c8
 800594c:	200008bc 	.word	0x200008bc
 8005950:	200007b8 	.word	0x200007b8
 8005954:	200007b4 	.word	0x200007b4
 8005958:	2000005c 	.word	0x2000005c

0800595c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	60fb      	str	r3, [r7, #12]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <vTaskPlaceOnEventList+0x44>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3318      	adds	r3, #24
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fe ffc4 	bl	8004918 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005990:	2101      	movs	r1, #1
 8005992:	6838      	ldr	r0, [r7, #0]
 8005994:	f000 fa70 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	200007b4 	.word	0x200007b4

080059a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	60fb      	str	r3, [r7, #12]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3318      	adds	r3, #24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe ffd8 	bl	800498a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <xTaskRemoveFromEventList+0xac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d11c      	bne.n	8005a1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe ffcf 	bl	800498a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <xTaskRemoveFromEventList+0xb0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <xTaskRemoveFromEventList+0xb0>)
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <xTaskRemoveFromEventList+0xb4>)
 8005a0c:	441a      	add	r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fe ff5b 	bl	80048d0 <vListInsertEnd>
 8005a1a:	e005      	b.n	8005a28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3318      	adds	r3, #24
 8005a20:	4619      	mov	r1, r3
 8005a22:	480e      	ldr	r0, [pc, #56]	; (8005a5c <xTaskRemoveFromEventList+0xb8>)
 8005a24:	f7fe ff54 	bl	80048d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xTaskRemoveFromEventList+0xbc>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d905      	bls.n	8005a42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskRemoveFromEventList+0xc0>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	e001      	b.n	8005a46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200008dc 	.word	0x200008dc
 8005a54:	200008bc 	.word	0x200008bc
 8005a58:	200007b8 	.word	0x200007b8
 8005a5c:	20000874 	.word	0x20000874
 8005a60:	200007b4 	.word	0x200007b4
 8005a64:	200008c8 	.word	0x200008c8

08005a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <vTaskInternalSetTimeOutState+0x24>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <vTaskInternalSetTimeOutState+0x28>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	200008cc 	.word	0x200008cc
 8005a90:	200008b8 	.word	0x200008b8

08005a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ad6:	f000 fb65 	bl	80061a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <xTaskCheckForTimeOut+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d102      	bne.n	8005afa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e023      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <xTaskCheckForTimeOut+0xc0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d007      	beq.n	8005b16 <xTaskCheckForTimeOut+0x82>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d302      	bcc.n	8005b16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e015      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d20b      	bcs.n	8005b38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff9b 	bl	8005a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	e004      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b42:	f000 fb5f 	bl	8006204 <vPortExitCritical>

	return xReturn;
 8005b46:	69fb      	ldr	r3, [r7, #28]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	200008b8 	.word	0x200008b8
 8005b54:	200008cc 	.word	0x200008cc

08005b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <vTaskMissedYield+0x14>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	200008c8 	.word	0x200008c8

08005b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b78:	f000 f852 	bl	8005c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <prvIdleTask+0x28>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d9f9      	bls.n	8005b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <prvIdleTask+0x2c>)
 8005b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b94:	e7f0      	b.n	8005b78 <prvIdleTask+0x8>
 8005b96:	bf00      	nop
 8005b98:	200007b8 	.word	0x200007b8
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	e00c      	b.n	8005bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <prvInitialiseTaskLists+0x60>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fe5b 	bl	8004876 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d9ef      	bls.n	8005bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bcc:	480d      	ldr	r0, [pc, #52]	; (8005c04 <prvInitialiseTaskLists+0x64>)
 8005bce:	f7fe fe52 	bl	8004876 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bd2:	480d      	ldr	r0, [pc, #52]	; (8005c08 <prvInitialiseTaskLists+0x68>)
 8005bd4:	f7fe fe4f 	bl	8004876 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bd8:	480c      	ldr	r0, [pc, #48]	; (8005c0c <prvInitialiseTaskLists+0x6c>)
 8005bda:	f7fe fe4c 	bl	8004876 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bde:	480c      	ldr	r0, [pc, #48]	; (8005c10 <prvInitialiseTaskLists+0x70>)
 8005be0:	f7fe fe49 	bl	8004876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005be4:	480b      	ldr	r0, [pc, #44]	; (8005c14 <prvInitialiseTaskLists+0x74>)
 8005be6:	f7fe fe46 	bl	8004876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <prvInitialiseTaskLists+0x78>)
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <prvInitialiseTaskLists+0x64>)
 8005bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvInitialiseTaskLists+0x7c>)
 8005bf2:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <prvInitialiseTaskLists+0x68>)
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200007b8 	.word	0x200007b8
 8005c04:	20000844 	.word	0x20000844
 8005c08:	20000858 	.word	0x20000858
 8005c0c:	20000874 	.word	0x20000874
 8005c10:	20000888 	.word	0x20000888
 8005c14:	200008a0 	.word	0x200008a0
 8005c18:	2000086c 	.word	0x2000086c
 8005c1c:	20000870 	.word	0x20000870

08005c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c26:	e019      	b.n	8005c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c28:	f000 fabc 	bl	80061a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <prvCheckTasksWaitingTermination+0x50>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fea6 	bl	800498a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <prvCheckTasksWaitingTermination+0x54>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <prvCheckTasksWaitingTermination+0x54>)
 8005c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c52:	f000 fad7 	bl	8006204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f810 	bl	8005c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e1      	bne.n	8005c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000888 	.word	0x20000888
 8005c74:	200008b4 	.word	0x200008b4
 8005c78:	2000089c 	.word	0x2000089c

08005c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	334c      	adds	r3, #76	; 0x4c
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fd6f 	bl	800676c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fc27 	bl	80064f0 <vPortFree>
				vPortFree( pxTCB );
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fc24 	bl	80064f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca8:	e018      	b.n	8005cdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d103      	bne.n	8005cbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc1b 	bl	80064f0 <vPortFree>
	}
 8005cba:	e00f      	b.n	8005cdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d00a      	beq.n	8005cdc <prvDeleteTCB+0x60>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <prvDeleteTCB+0x5e>
	}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <prvResetNextTaskUnblockTime+0x44>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <prvResetNextTaskUnblockTime+0x14>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <prvResetNextTaskUnblockTime+0x16>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <prvResetNextTaskUnblockTime+0x48>)
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295
 8005d04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d06:	e008      	b.n	8005d1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <prvResetNextTaskUnblockTime+0x44>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <prvResetNextTaskUnblockTime+0x48>)
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000086c 	.word	0x2000086c
 8005d2c:	200008d4 	.word	0x200008d4

08005d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <xTaskGetSchedulerState+0x34>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	e008      	b.n	8005d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <xTaskGetSchedulerState+0x38>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	e001      	b.n	8005d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d56:	687b      	ldr	r3, [r7, #4]
	}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	200008c0 	.word	0x200008c0
 8005d68:	200008dc 	.word	0x200008dc

08005d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d06e      	beq.n	8005e60 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d82:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <xTaskPriorityDisinherit+0x100>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d00a      	beq.n	8005da2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60fb      	str	r3, [r7, #12]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60bb      	str	r3, [r7, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	1e5a      	subs	r2, r3, #1
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d044      	beq.n	8005e60 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d140      	bne.n	8005e60 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fdd1 	bl	800498a <uxListRemove>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d115      	bne.n	8005e1a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	491f      	ldr	r1, [pc, #124]	; (8005e70 <xTaskPriorityDisinherit+0x104>)
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xTaskPriorityDisinherit+0xae>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	2201      	movs	r2, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <xTaskPriorityDisinherit+0x108>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4013      	ands	r3, r2
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <xTaskPriorityDisinherit+0x108>)
 8005e18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f1c3 0207 	rsb	r2, r3, #7
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	2201      	movs	r2, #1
 8005e34:	409a      	lsls	r2, r3
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <xTaskPriorityDisinherit+0x108>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <xTaskPriorityDisinherit+0x108>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <xTaskPriorityDisinherit+0x104>)
 8005e4e:	441a      	add	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f7fe fd3a 	bl	80048d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e60:	697b      	ldr	r3, [r7, #20]
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200007b4 	.word	0x200007b4
 8005e70:	200007b8 	.word	0x200007b8
 8005e74:	200008bc 	.word	0x200008bc

08005e78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e88:	4b28      	ldr	r3, [pc, #160]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fd7b 	bl	800498a <uxListRemove>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4013      	ands	r3, r2
 8005eae:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d10a      	bne.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	481a      	ldr	r0, [pc, #104]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005eca:	f7fe fd01 	bl	80048d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ece:	e026      	b.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d209      	bcs.n	8005efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe fd0f 	bl	8004918 <vListInsert>
}
 8005efa:	e010      	b.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7fe fd05 	bl	8004918 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d202      	bcs.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	200008b8 	.word	0x200008b8
 8005f2c:	200007b4 	.word	0x200007b4
 8005f30:	200008bc 	.word	0x200008bc
 8005f34:	200008a0 	.word	0x200008a0
 8005f38:	20000870 	.word	0x20000870
 8005f3c:	2000086c 	.word	0x2000086c
 8005f40:	200008d4 	.word	0x200008d4

08005f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b04      	subs	r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0201 	bic.w	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b04      	subs	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f74:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <pxPortInitialiseStack+0x64>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b14      	subs	r3, #20
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3b04      	subs	r3, #4
 8005f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f06f 0202 	mvn.w	r2, #2
 8005f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3b20      	subs	r3, #32
 8005f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	08005fad 	.word	0x08005fad

08005fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <prvTaskExitError+0x54>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d00a      	beq.n	8005fd6 <prvTaskExitError+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <prvTaskExitError+0x28>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60bb      	str	r3, [r7, #8]
}
 8005fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fea:	bf00      	nop
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0fc      	beq.n	8005fec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	2000000c 	.word	0x2000000c
	...

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	4770      	bx	lr
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst2>:
 8006030:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <prvPortStartFirstTask+0x24>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8814 	msr	CONTROL, r0
 800604a:	b662      	cpsie	i
 800604c:	b661      	cpsie	f
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	df00      	svc	0
 8006058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800605a:	bf00      	nop
 800605c:	e000ed08 	.word	0xe000ed08

08006060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006066:	4b46      	ldr	r3, [pc, #280]	; (8006180 <xPortStartScheduler+0x120>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a46      	ldr	r2, [pc, #280]	; (8006184 <xPortStartScheduler+0x124>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10a      	bne.n	8006086 <xPortStartScheduler+0x26>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	613b      	str	r3, [r7, #16]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006086:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <xPortStartScheduler+0x12c>)
 80060a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <xPortStartScheduler+0x130>)
 80060cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <xPortStartScheduler+0x134>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060d4:	e009      	b.n	80060ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <xPortStartScheduler+0x134>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3b01      	subs	r3, #1
 80060dc:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <xPortStartScheduler+0x134>)
 80060de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d0ef      	beq.n	80060d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1c3 0307 	rsb	r3, r3, #7
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00a      	beq.n	8006118 <xPortStartScheduler+0xb8>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60bb      	str	r3, [r7, #8]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <xPortStartScheduler+0x134>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <xPortStartScheduler+0x134>)
 8006120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <xPortStartScheduler+0x134>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <xPortStartScheduler+0x134>)
 800612c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <xPortStartScheduler+0x138>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <xPortStartScheduler+0x138>)
 800613c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <xPortStartScheduler+0x138>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a14      	ldr	r2, [pc, #80]	; (8006198 <xPortStartScheduler+0x138>)
 8006148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800614c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800614e:	f000 f8dd 	bl	800630c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <xPortStartScheduler+0x13c>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006158:	f000 f8fc 	bl	8006354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xPortStartScheduler+0x140>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <xPortStartScheduler+0x140>)
 8006162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006168:	f7ff ff66 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800616c:	f7ff fb94 	bl	8005898 <vTaskSwitchContext>
	prvTaskExitError();
 8006170:	f7ff ff1c 	bl	8005fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000ed00 	.word	0xe000ed00
 8006184:	410fc271 	.word	0x410fc271
 8006188:	410fc270 	.word	0x410fc270
 800618c:	e000e400 	.word	0xe000e400
 8006190:	200008e0 	.word	0x200008e0
 8006194:	200008e4 	.word	0x200008e4
 8006198:	e000ed20 	.word	0xe000ed20
 800619c:	2000000c 	.word	0x2000000c
 80061a0:	e000ef34 	.word	0xe000ef34

080061a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	607b      	str	r3, [r7, #4]
}
 80061bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <vPortEnterCritical+0x58>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <vPortEnterCritical+0x58>)
 80061c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <vPortEnterCritical+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10f      	bne.n	80061f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <vPortEnterCritical+0x5c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	603b      	str	r3, [r7, #0]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <vPortEnterCritical+0x4a>
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2000000c 	.word	0x2000000c
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <vPortExitCritical+0x50>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <vPortExitCritical+0x24>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	607b      	str	r3, [r7, #4]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vPortExitCritical+0x50>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <vPortExitCritical+0x50>)
 8006230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <vPortExitCritical+0x42>
 800623a:	2300      	movs	r3, #0
 800623c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000000c 	.word	0x2000000c
	...

08006260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006260:	f3ef 8009 	mrs	r0, PSP
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <pxCurrentTCBConst>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f01e 0f10 	tst.w	lr, #16
 8006270:	bf08      	it	eq
 8006272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006284:	f380 8811 	msr	BASEPRI, r0
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f7ff fb02 	bl	8005898 <vTaskSwitchContext>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f380 8811 	msr	BASEPRI, r0
 800629c:	bc09      	pop	{r0, r3}
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a6:	f01e 0f10 	tst.w	lr, #16
 80062aa:	bf08      	it	eq
 80062ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062b0:	f380 8809 	msr	PSP, r0
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst>:
 80062c0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e2:	f7ff fa1b 	bl	800571c <xTaskIncrementTick>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <SysTick_Handler+0x40>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f383 8811 	msr	BASEPRI, r3
}
 80062fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <vPortSetupTimerInterrupt+0x38>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <vPortSetupTimerInterrupt+0x3c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <vPortSetupTimerInterrupt+0x40>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	099b      	lsrs	r3, r3, #6
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <vPortSetupTimerInterrupt+0x44>)
 800632a:	3b01      	subs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	e000e010 	.word	0xe000e010
 8006344:	e000e018 	.word	0xe000e018
 8006348:	20000000 	.word	0x20000000
 800634c:	10624dd3 	.word	0x10624dd3
 8006350:	e000e014 	.word	0xe000e014

08006354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006364 <vPortEnableVFP+0x10>
 8006358:	6801      	ldr	r1, [r0, #0]
 800635a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800635e:	6001      	str	r1, [r0, #0]
 8006360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006362:	bf00      	nop
 8006364:	e000ed88 	.word	0xe000ed88

08006368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006374:	f7ff f928 	bl	80055c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006378:	4b58      	ldr	r3, [pc, #352]	; (80064dc <pvPortMalloc+0x174>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006380:	f000 f910 	bl	80065a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006384:	4b56      	ldr	r3, [pc, #344]	; (80064e0 <pvPortMalloc+0x178>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 808e 	bne.w	80064ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01d      	beq.n	80063d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006398:	2208      	movs	r2, #8
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	3308      	adds	r3, #8
 80063b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <pvPortMalloc+0x6c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	617b      	str	r3, [r7, #20]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d069      	beq.n	80064ae <pvPortMalloc+0x146>
 80063da:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <pvPortMalloc+0x17c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d864      	bhi.n	80064ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063e4:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <pvPortMalloc+0x180>)
 80063e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063e8:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <pvPortMalloc+0x180>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ee:	e004      	b.n	80063fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <pvPortMalloc+0xa4>
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f1      	bne.n	80063f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800640c:	4b33      	ldr	r3, [pc, #204]	; (80064dc <pvPortMalloc+0x174>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	429a      	cmp	r2, r3
 8006414:	d04b      	beq.n	80064ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	2308      	movs	r3, #8
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d91f      	bls.n	8006478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <pvPortMalloc+0xf8>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	613b      	str	r3, [r7, #16]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f000 f8f8 	bl	8006668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006478:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <pvPortMalloc+0x17c>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <pvPortMalloc+0x17c>)
 8006484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006486:	4b17      	ldr	r3, [pc, #92]	; (80064e4 <pvPortMalloc+0x17c>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <pvPortMalloc+0x184>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d203      	bcs.n	800649a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <pvPortMalloc+0x17c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <pvPortMalloc+0x184>)
 8006498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <pvPortMalloc+0x178>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064ae:	f7ff f899 	bl	80055e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <pvPortMalloc+0x16a>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <pvPortMalloc+0x168>
	return pvReturn;
 80064d2:	69fb      	ldr	r3, [r7, #28]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200014f0 	.word	0x200014f0
 80064e0:	200014fc 	.word	0x200014fc
 80064e4:	200014f4 	.word	0x200014f4
 80064e8:	200014e8 	.word	0x200014e8
 80064ec:	200014f8 	.word	0x200014f8

080064f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d048      	beq.n	8006594 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006502:	2308      	movs	r3, #8
 8006504:	425b      	negs	r3, r3
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	4b21      	ldr	r3, [pc, #132]	; (800659c <vPortFree+0xac>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <vPortFree+0x44>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <vPortFree+0x62>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60bb      	str	r3, [r7, #8]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <vPortFree+0xac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d019      	beq.n	8006594 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d115      	bne.n	8006594 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <vPortFree+0xac>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	43db      	mvns	r3, r3
 8006572:	401a      	ands	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006578:	f7ff f826 	bl	80055c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <vPortFree+0xb0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4413      	add	r3, r2
 8006586:	4a06      	ldr	r2, [pc, #24]	; (80065a0 <vPortFree+0xb0>)
 8006588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f000 f86c 	bl	8006668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006590:	f7ff f828 	bl	80055e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200014fc 	.word	0x200014fc
 80065a0:	200014f4 	.word	0x200014f4

080065a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <prvHeapInit+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00c      	beq.n	80065d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3307      	adds	r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <prvHeapInit+0xac>)
 80065d4:	4413      	add	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <prvHeapInit+0xb0>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <prvHeapInit+0xb0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065f0:	2208      	movs	r2, #8
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <prvHeapInit+0xb4>)
 8006604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <prvHeapInit+0xb4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <prvHeapInit+0xb4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <prvHeapInit+0xb4>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a0a      	ldr	r2, [pc, #40]	; (800665c <prvHeapInit+0xb8>)
 8006632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <prvHeapInit+0xbc>)
 800663a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <prvHeapInit+0xc0>)
 800663e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	200008e8 	.word	0x200008e8
 8006654:	200014e8 	.word	0x200014e8
 8006658:	200014f0 	.word	0x200014f0
 800665c:	200014f8 	.word	0x200014f8
 8006660:	200014f4 	.word	0x200014f4
 8006664:	200014fc 	.word	0x200014fc

08006668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <prvInsertBlockIntoFreeList+0xac>)
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e002      	b.n	800667c <prvInsertBlockIntoFreeList+0x14>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d8f7      	bhi.n	8006676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d108      	bne.n	80066aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d118      	bne.n	80066f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d00d      	beq.n	80066e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e008      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e003      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d002      	beq.n	8006706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	200014e8 	.word	0x200014e8
 8006718:	200014f0 	.word	0x200014f0

0800671c <siprintf>:
 800671c:	b40e      	push	{r1, r2, r3}
 800671e:	b500      	push	{lr}
 8006720:	b09c      	sub	sp, #112	; 0x70
 8006722:	ab1d      	add	r3, sp, #116	; 0x74
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	9006      	str	r0, [sp, #24]
 8006728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800672c:	4809      	ldr	r0, [pc, #36]	; (8006754 <siprintf+0x38>)
 800672e:	9107      	str	r1, [sp, #28]
 8006730:	9104      	str	r1, [sp, #16]
 8006732:	4909      	ldr	r1, [pc, #36]	; (8006758 <siprintf+0x3c>)
 8006734:	f853 2b04 	ldr.w	r2, [r3], #4
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	6800      	ldr	r0, [r0, #0]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	a902      	add	r1, sp, #8
 8006740:	f000 f9f6 	bl	8006b30 <_svfiprintf_r>
 8006744:	9b02      	ldr	r3, [sp, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	b01c      	add	sp, #112	; 0x70
 800674c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006750:	b003      	add	sp, #12
 8006752:	4770      	bx	lr
 8006754:	2000005c 	.word	0x2000005c
 8006758:	ffff0208 	.word	0xffff0208

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <_reclaim_reent>:
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <_reclaim_reent+0xa8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4283      	cmp	r3, r0
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	d04b      	beq.n	8006810 <_reclaim_reent+0xa4>
 8006778:	69c3      	ldr	r3, [r0, #28]
 800677a:	b143      	cbz	r3, 800678e <_reclaim_reent+0x22>
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d144      	bne.n	800680c <_reclaim_reent+0xa0>
 8006782:	69e3      	ldr	r3, [r4, #28]
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	b111      	cbz	r1, 800678e <_reclaim_reent+0x22>
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f87f 	bl	800688c <_free_r>
 800678e:	6961      	ldr	r1, [r4, #20]
 8006790:	b111      	cbz	r1, 8006798 <_reclaim_reent+0x2c>
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f87a 	bl	800688c <_free_r>
 8006798:	69e1      	ldr	r1, [r4, #28]
 800679a:	b111      	cbz	r1, 80067a2 <_reclaim_reent+0x36>
 800679c:	4620      	mov	r0, r4
 800679e:	f000 f875 	bl	800688c <_free_r>
 80067a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067a4:	b111      	cbz	r1, 80067ac <_reclaim_reent+0x40>
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f870 	bl	800688c <_free_r>
 80067ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ae:	b111      	cbz	r1, 80067b6 <_reclaim_reent+0x4a>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f86b 	bl	800688c <_free_r>
 80067b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067b8:	b111      	cbz	r1, 80067c0 <_reclaim_reent+0x54>
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f866 	bl	800688c <_free_r>
 80067c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067c2:	b111      	cbz	r1, 80067ca <_reclaim_reent+0x5e>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f861 	bl	800688c <_free_r>
 80067ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80067cc:	b111      	cbz	r1, 80067d4 <_reclaim_reent+0x68>
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f85c 	bl	800688c <_free_r>
 80067d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067d6:	b111      	cbz	r1, 80067de <_reclaim_reent+0x72>
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 f857 	bl	800688c <_free_r>
 80067de:	6a23      	ldr	r3, [r4, #32]
 80067e0:	b1b3      	cbz	r3, 8006810 <_reclaim_reent+0xa4>
 80067e2:	4620      	mov	r0, r4
 80067e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067e8:	4718      	bx	r3
 80067ea:	5949      	ldr	r1, [r1, r5]
 80067ec:	b941      	cbnz	r1, 8006800 <_reclaim_reent+0x94>
 80067ee:	3504      	adds	r5, #4
 80067f0:	69e3      	ldr	r3, [r4, #28]
 80067f2:	2d80      	cmp	r5, #128	; 0x80
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	d1f8      	bne.n	80067ea <_reclaim_reent+0x7e>
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 f847 	bl	800688c <_free_r>
 80067fe:	e7c0      	b.n	8006782 <_reclaim_reent+0x16>
 8006800:	680e      	ldr	r6, [r1, #0]
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f842 	bl	800688c <_free_r>
 8006808:	4631      	mov	r1, r6
 800680a:	e7ef      	b.n	80067ec <_reclaim_reent+0x80>
 800680c:	2500      	movs	r5, #0
 800680e:	e7ef      	b.n	80067f0 <_reclaim_reent+0x84>
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	bf00      	nop
 8006814:	2000005c 	.word	0x2000005c

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000005c 	.word	0x2000005c

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	; (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	; (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	; (8006868 <__libc_init_array+0x44>)
 8006838:	f000 fc6a 	bl	8007110 <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	080073d4 	.word	0x080073d4
 8006860:	080073d4 	.word	0x080073d4
 8006864:	080073d4 	.word	0x080073d4
 8006868:	080073d8 	.word	0x080073d8

0800686c <__retarget_lock_acquire_recursive>:
 800686c:	4770      	bx	lr

0800686e <__retarget_lock_release_recursive>:
 800686e:	4770      	bx	lr

08006870 <memcpy>:
 8006870:	440a      	add	r2, r1
 8006872:	4291      	cmp	r1, r2
 8006874:	f100 33ff 	add.w	r3, r0, #4294967295
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	4770      	bx	lr
 800687c:	b510      	push	{r4, lr}
 800687e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006886:	4291      	cmp	r1, r2
 8006888:	d1f9      	bne.n	800687e <memcpy+0xe>
 800688a:	bd10      	pop	{r4, pc}

0800688c <_free_r>:
 800688c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688e:	2900      	cmp	r1, #0
 8006890:	d044      	beq.n	800691c <_free_r+0x90>
 8006892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006896:	9001      	str	r0, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f1a1 0404 	sub.w	r4, r1, #4
 800689e:	bfb8      	it	lt
 80068a0:	18e4      	addlt	r4, r4, r3
 80068a2:	f000 f8df 	bl	8006a64 <__malloc_lock>
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <_free_r+0x94>)
 80068a8:	9801      	ldr	r0, [sp, #4]
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x30>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	b003      	add	sp, #12
 80068b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b8:	f000 b8da 	b.w	8006a70 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x46>
 80068c0:	6825      	ldr	r5, [r4, #0]
 80068c2:	1961      	adds	r1, r4, r5
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1949      	addeq	r1, r1, r5
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x22>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x50>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x46>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1855      	adds	r5, r2, r1
 80068e0:	42a5      	cmp	r5, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x70>
 80068e4:	6824      	ldr	r4, [r4, #0]
 80068e6:	4421      	add	r1, r4
 80068e8:	1854      	adds	r4, r2, r1
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x26>
 80068f0:	681c      	ldr	r4, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	440c      	add	r4, r1
 80068f8:	6014      	str	r4, [r2, #0]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x26>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x78>
 80068fe:	230c      	movs	r3, #12
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x26>
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	1961      	adds	r1, r4, r5
 8006908:	428b      	cmp	r3, r1
 800690a:	bf04      	itt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	bf04      	itt	eq
 8006914:	1949      	addeq	r1, r1, r5
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	6054      	str	r4, [r2, #4]
 800691a:	e7ca      	b.n	80068b2 <_free_r+0x26>
 800691c:	b003      	add	sp, #12
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	20001640 	.word	0x20001640

08006924 <sbrk_aligned>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0e      	ldr	r6, [pc, #56]	; (8006960 <sbrk_aligned+0x3c>)
 8006928:	460c      	mov	r4, r1
 800692a:	6831      	ldr	r1, [r6, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	b911      	cbnz	r1, 8006936 <sbrk_aligned+0x12>
 8006930:	f000 fba6 	bl	8007080 <_sbrk_r>
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fba1 	bl	8007080 <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <sbrk_aligned+0x34>
 8006942:	1cc4      	adds	r4, r0, #3
 8006944:	f024 0403 	bic.w	r4, r4, #3
 8006948:	42a0      	cmp	r0, r4
 800694a:	d007      	beq.n	800695c <sbrk_aligned+0x38>
 800694c:	1a21      	subs	r1, r4, r0
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fb96 	bl	8007080 <_sbrk_r>
 8006954:	3001      	adds	r0, #1
 8006956:	d101      	bne.n	800695c <sbrk_aligned+0x38>
 8006958:	f04f 34ff 	mov.w	r4, #4294967295
 800695c:	4620      	mov	r0, r4
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	20001644 	.word	0x20001644

08006964 <_malloc_r>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4607      	mov	r7, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d905      	bls.n	800698c <_malloc_r+0x28>
 8006980:	230c      	movs	r3, #12
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	2600      	movs	r6, #0
 8006986:	4630      	mov	r0, r6
 8006988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a60 <_malloc_r+0xfc>
 8006990:	f000 f868 	bl	8006a64 <__malloc_lock>
 8006994:	f8d8 3000 	ldr.w	r3, [r8]
 8006998:	461c      	mov	r4, r3
 800699a:	bb5c      	cbnz	r4, 80069f4 <_malloc_r+0x90>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ffc0 	bl	8006924 <sbrk_aligned>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	4604      	mov	r4, r0
 80069a8:	d155      	bne.n	8006a56 <_malloc_r+0xf2>
 80069aa:	f8d8 4000 	ldr.w	r4, [r8]
 80069ae:	4626      	mov	r6, r4
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d145      	bne.n	8006a40 <_malloc_r+0xdc>
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d048      	beq.n	8006a4a <_malloc_r+0xe6>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	4631      	mov	r1, r6
 80069bc:	4638      	mov	r0, r7
 80069be:	eb04 0903 	add.w	r9, r4, r3
 80069c2:	f000 fb5d 	bl	8007080 <_sbrk_r>
 80069c6:	4581      	cmp	r9, r0
 80069c8:	d13f      	bne.n	8006a4a <_malloc_r+0xe6>
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	1a6d      	subs	r5, r5, r1
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ffa7 	bl	8006924 <sbrk_aligned>
 80069d6:	3001      	adds	r0, #1
 80069d8:	d037      	beq.n	8006a4a <_malloc_r+0xe6>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	442b      	add	r3, r5
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	f8d8 3000 	ldr.w	r3, [r8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d038      	beq.n	8006a5a <_malloc_r+0xf6>
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	42a2      	cmp	r2, r4
 80069ec:	d12b      	bne.n	8006a46 <_malloc_r+0xe2>
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	e00f      	b.n	8006a14 <_malloc_r+0xb0>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	1b52      	subs	r2, r2, r5
 80069f8:	d41f      	bmi.n	8006a3a <_malloc_r+0xd6>
 80069fa:	2a0b      	cmp	r2, #11
 80069fc:	d917      	bls.n	8006a2e <_malloc_r+0xca>
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	6059      	strne	r1, [r3, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	bf08      	it	eq
 8006a0c:	f8c8 1000 	streq.w	r1, [r8]
 8006a10:	5162      	str	r2, [r4, r5]
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	4638      	mov	r0, r7
 8006a16:	f104 060b 	add.w	r6, r4, #11
 8006a1a:	f000 f829 	bl	8006a70 <__malloc_unlock>
 8006a1e:	f026 0607 	bic.w	r6, r6, #7
 8006a22:	1d23      	adds	r3, r4, #4
 8006a24:	1af2      	subs	r2, r6, r3
 8006a26:	d0ae      	beq.n	8006986 <_malloc_r+0x22>
 8006a28:	1b9b      	subs	r3, r3, r6
 8006a2a:	50a3      	str	r3, [r4, r2]
 8006a2c:	e7ab      	b.n	8006986 <_malloc_r+0x22>
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	d1dd      	bne.n	80069f0 <_malloc_r+0x8c>
 8006a34:	f8c8 2000 	str.w	r2, [r8]
 8006a38:	e7ec      	b.n	8006a14 <_malloc_r+0xb0>
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	6864      	ldr	r4, [r4, #4]
 8006a3e:	e7ac      	b.n	800699a <_malloc_r+0x36>
 8006a40:	4634      	mov	r4, r6
 8006a42:	6876      	ldr	r6, [r6, #4]
 8006a44:	e7b4      	b.n	80069b0 <_malloc_r+0x4c>
 8006a46:	4613      	mov	r3, r2
 8006a48:	e7cc      	b.n	80069e4 <_malloc_r+0x80>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f000 f80e 	bl	8006a70 <__malloc_unlock>
 8006a54:	e797      	b.n	8006986 <_malloc_r+0x22>
 8006a56:	6025      	str	r5, [r4, #0]
 8006a58:	e7dc      	b.n	8006a14 <_malloc_r+0xb0>
 8006a5a:	605b      	str	r3, [r3, #4]
 8006a5c:	deff      	udf	#255	; 0xff
 8006a5e:	bf00      	nop
 8006a60:	20001640 	.word	0x20001640

08006a64 <__malloc_lock>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__malloc_lock+0x8>)
 8006a66:	f7ff bf01 	b.w	800686c <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	2000163c 	.word	0x2000163c

08006a70 <__malloc_unlock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__malloc_unlock+0x8>)
 8006a72:	f7ff befc 	b.w	800686e <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	2000163c 	.word	0x2000163c

08006a7c <__ssputs_r>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	688e      	ldr	r6, [r1, #8]
 8006a82:	461f      	mov	r7, r3
 8006a84:	42be      	cmp	r6, r7
 8006a86:	680b      	ldr	r3, [r1, #0]
 8006a88:	4682      	mov	sl, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4690      	mov	r8, r2
 8006a8e:	d82c      	bhi.n	8006aea <__ssputs_r+0x6e>
 8006a90:	898a      	ldrh	r2, [r1, #12]
 8006a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a96:	d026      	beq.n	8006ae6 <__ssputs_r+0x6a>
 8006a98:	6965      	ldr	r5, [r4, #20]
 8006a9a:	6909      	ldr	r1, [r1, #16]
 8006a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aa0:	eba3 0901 	sub.w	r9, r3, r1
 8006aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aa8:	1c7b      	adds	r3, r7, #1
 8006aaa:	444b      	add	r3, r9
 8006aac:	106d      	asrs	r5, r5, #1
 8006aae:	429d      	cmp	r5, r3
 8006ab0:	bf38      	it	cc
 8006ab2:	461d      	movcc	r5, r3
 8006ab4:	0553      	lsls	r3, r2, #21
 8006ab6:	d527      	bpl.n	8006b08 <__ssputs_r+0x8c>
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7ff ff53 	bl	8006964 <_malloc_r>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	b360      	cbz	r0, 8006b1c <__ssputs_r+0xa0>
 8006ac2:	6921      	ldr	r1, [r4, #16]
 8006ac4:	464a      	mov	r2, r9
 8006ac6:	f7ff fed3 	bl	8006870 <memcpy>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	6126      	str	r6, [r4, #16]
 8006ad8:	6165      	str	r5, [r4, #20]
 8006ada:	444e      	add	r6, r9
 8006adc:	eba5 0509 	sub.w	r5, r5, r9
 8006ae0:	6026      	str	r6, [r4, #0]
 8006ae2:	60a5      	str	r5, [r4, #8]
 8006ae4:	463e      	mov	r6, r7
 8006ae6:	42be      	cmp	r6, r7
 8006ae8:	d900      	bls.n	8006aec <__ssputs_r+0x70>
 8006aea:	463e      	mov	r6, r7
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	4632      	mov	r2, r6
 8006af0:	4641      	mov	r1, r8
 8006af2:	f000 faab 	bl	800704c <memmove>
 8006af6:	68a3      	ldr	r3, [r4, #8]
 8006af8:	1b9b      	subs	r3, r3, r6
 8006afa:	60a3      	str	r3, [r4, #8]
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	4433      	add	r3, r6
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	2000      	movs	r0, #0
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	462a      	mov	r2, r5
 8006b0a:	f000 fac9 	bl	80070a0 <_realloc_r>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1e0      	bne.n	8006ad6 <__ssputs_r+0x5a>
 8006b14:	6921      	ldr	r1, [r4, #16]
 8006b16:	4650      	mov	r0, sl
 8006b18:	f7ff feb8 	bl	800688c <_free_r>
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	f8ca 3000 	str.w	r3, [sl]
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	e7e9      	b.n	8006b04 <__ssputs_r+0x88>

08006b30 <_svfiprintf_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	4698      	mov	r8, r3
 8006b36:	898b      	ldrh	r3, [r1, #12]
 8006b38:	061b      	lsls	r3, r3, #24
 8006b3a:	b09d      	sub	sp, #116	; 0x74
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	4614      	mov	r4, r2
 8006b42:	d50e      	bpl.n	8006b62 <_svfiprintf_r+0x32>
 8006b44:	690b      	ldr	r3, [r1, #16]
 8006b46:	b963      	cbnz	r3, 8006b62 <_svfiprintf_r+0x32>
 8006b48:	2140      	movs	r1, #64	; 0x40
 8006b4a:	f7ff ff0b 	bl	8006964 <_malloc_r>
 8006b4e:	6028      	str	r0, [r5, #0]
 8006b50:	6128      	str	r0, [r5, #16]
 8006b52:	b920      	cbnz	r0, 8006b5e <_svfiprintf_r+0x2e>
 8006b54:	230c      	movs	r3, #12
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e0d0      	b.n	8006d00 <_svfiprintf_r+0x1d0>
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	616b      	str	r3, [r5, #20]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9309      	str	r3, [sp, #36]	; 0x24
 8006b66:	2320      	movs	r3, #32
 8006b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b70:	2330      	movs	r3, #48	; 0x30
 8006b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d18 <_svfiprintf_r+0x1e8>
 8006b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b7a:	f04f 0901 	mov.w	r9, #1
 8006b7e:	4623      	mov	r3, r4
 8006b80:	469a      	mov	sl, r3
 8006b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b86:	b10a      	cbz	r2, 8006b8c <_svfiprintf_r+0x5c>
 8006b88:	2a25      	cmp	r2, #37	; 0x25
 8006b8a:	d1f9      	bne.n	8006b80 <_svfiprintf_r+0x50>
 8006b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b90:	d00b      	beq.n	8006baa <_svfiprintf_r+0x7a>
 8006b92:	465b      	mov	r3, fp
 8006b94:	4622      	mov	r2, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ff6f 	bl	8006a7c <__ssputs_r>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f000 80a9 	beq.w	8006cf6 <_svfiprintf_r+0x1c6>
 8006ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba6:	445a      	add	r2, fp
 8006ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8006baa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80a1 	beq.w	8006cf6 <_svfiprintf_r+0x1c6>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bbe:	f10a 0a01 	add.w	sl, sl, #1
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bca:	931a      	str	r3, [sp, #104]	; 0x68
 8006bcc:	4654      	mov	r4, sl
 8006bce:	2205      	movs	r2, #5
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	4850      	ldr	r0, [pc, #320]	; (8006d18 <_svfiprintf_r+0x1e8>)
 8006bd6:	f7f9 fb03 	bl	80001e0 <memchr>
 8006bda:	9a04      	ldr	r2, [sp, #16]
 8006bdc:	b9d8      	cbnz	r0, 8006c16 <_svfiprintf_r+0xe6>
 8006bde:	06d0      	lsls	r0, r2, #27
 8006be0:	bf44      	itt	mi
 8006be2:	2320      	movmi	r3, #32
 8006be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be8:	0711      	lsls	r1, r2, #28
 8006bea:	bf44      	itt	mi
 8006bec:	232b      	movmi	r3, #43	; 0x2b
 8006bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf8:	d015      	beq.n	8006c26 <_svfiprintf_r+0xf6>
 8006bfa:	9a07      	ldr	r2, [sp, #28]
 8006bfc:	4654      	mov	r4, sl
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f04f 0c0a 	mov.w	ip, #10
 8006c04:	4621      	mov	r1, r4
 8006c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0a:	3b30      	subs	r3, #48	; 0x30
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d94d      	bls.n	8006cac <_svfiprintf_r+0x17c>
 8006c10:	b1b0      	cbz	r0, 8006c40 <_svfiprintf_r+0x110>
 8006c12:	9207      	str	r2, [sp, #28]
 8006c14:	e014      	b.n	8006c40 <_svfiprintf_r+0x110>
 8006c16:	eba0 0308 	sub.w	r3, r0, r8
 8006c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	46a2      	mov	sl, r4
 8006c24:	e7d2      	b.n	8006bcc <_svfiprintf_r+0x9c>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9103      	str	r1, [sp, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfbb      	ittet	lt
 8006c32:	425b      	neglt	r3, r3
 8006c34:	f042 0202 	orrlt.w	r2, r2, #2
 8006c38:	9307      	strge	r3, [sp, #28]
 8006c3a:	9307      	strlt	r3, [sp, #28]
 8006c3c:	bfb8      	it	lt
 8006c3e:	9204      	strlt	r2, [sp, #16]
 8006c40:	7823      	ldrb	r3, [r4, #0]
 8006c42:	2b2e      	cmp	r3, #46	; 0x2e
 8006c44:	d10c      	bne.n	8006c60 <_svfiprintf_r+0x130>
 8006c46:	7863      	ldrb	r3, [r4, #1]
 8006c48:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4a:	d134      	bne.n	8006cb6 <_svfiprintf_r+0x186>
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	1d1a      	adds	r2, r3, #4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	9203      	str	r2, [sp, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfb8      	it	lt
 8006c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c5c:	3402      	adds	r4, #2
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d28 <_svfiprintf_r+0x1f8>
 8006c64:	7821      	ldrb	r1, [r4, #0]
 8006c66:	2203      	movs	r2, #3
 8006c68:	4650      	mov	r0, sl
 8006c6a:	f7f9 fab9 	bl	80001e0 <memchr>
 8006c6e:	b138      	cbz	r0, 8006c80 <_svfiprintf_r+0x150>
 8006c70:	9b04      	ldr	r3, [sp, #16]
 8006c72:	eba0 000a 	sub.w	r0, r0, sl
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	4082      	lsls	r2, r0
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	3401      	adds	r4, #1
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c84:	4825      	ldr	r0, [pc, #148]	; (8006d1c <_svfiprintf_r+0x1ec>)
 8006c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c8a:	2206      	movs	r2, #6
 8006c8c:	f7f9 faa8 	bl	80001e0 <memchr>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d038      	beq.n	8006d06 <_svfiprintf_r+0x1d6>
 8006c94:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <_svfiprintf_r+0x1f0>)
 8006c96:	bb1b      	cbnz	r3, 8006ce0 <_svfiprintf_r+0x1b0>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	3307      	adds	r3, #7
 8006c9c:	f023 0307 	bic.w	r3, r3, #7
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	4433      	add	r3, r6
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	e768      	b.n	8006b7e <_svfiprintf_r+0x4e>
 8006cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	e7a6      	b.n	8006c04 <_svfiprintf_r+0xd4>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	3401      	adds	r4, #1
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f04f 0c0a 	mov.w	ip, #10
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc8:	3a30      	subs	r2, #48	; 0x30
 8006cca:	2a09      	cmp	r2, #9
 8006ccc:	d903      	bls.n	8006cd6 <_svfiprintf_r+0x1a6>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0c6      	beq.n	8006c60 <_svfiprintf_r+0x130>
 8006cd2:	9105      	str	r1, [sp, #20]
 8006cd4:	e7c4      	b.n	8006c60 <_svfiprintf_r+0x130>
 8006cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cda:	4604      	mov	r4, r0
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e7f0      	b.n	8006cc2 <_svfiprintf_r+0x192>
 8006ce0:	ab03      	add	r3, sp, #12
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <_svfiprintf_r+0x1f4>)
 8006ce8:	a904      	add	r1, sp, #16
 8006cea:	4638      	mov	r0, r7
 8006cec:	f3af 8000 	nop.w
 8006cf0:	1c42      	adds	r2, r0, #1
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	d1d6      	bne.n	8006ca4 <_svfiprintf_r+0x174>
 8006cf6:	89ab      	ldrh	r3, [r5, #12]
 8006cf8:	065b      	lsls	r3, r3, #25
 8006cfa:	f53f af2d 	bmi.w	8006b58 <_svfiprintf_r+0x28>
 8006cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d00:	b01d      	add	sp, #116	; 0x74
 8006d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d06:	ab03      	add	r3, sp, #12
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <_svfiprintf_r+0x1f4>)
 8006d0e:	a904      	add	r1, sp, #16
 8006d10:	4638      	mov	r0, r7
 8006d12:	f000 f879 	bl	8006e08 <_printf_i>
 8006d16:	e7eb      	b.n	8006cf0 <_svfiprintf_r+0x1c0>
 8006d18:	080073a0 	.word	0x080073a0
 8006d1c:	080073aa 	.word	0x080073aa
 8006d20:	00000000 	.word	0x00000000
 8006d24:	08006a7d 	.word	0x08006a7d
 8006d28:	080073a6 	.word	0x080073a6

08006d2c <_printf_common>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4616      	mov	r6, r2
 8006d32:	4699      	mov	r9, r3
 8006d34:	688a      	ldr	r2, [r1, #8]
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bfb8      	it	lt
 8006d40:	4613      	movlt	r3, r2
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d48:	4607      	mov	r7, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b10a      	cbz	r2, 8006d52 <_printf_common+0x26>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	0699      	lsls	r1, r3, #26
 8006d56:	bf42      	ittt	mi
 8006d58:	6833      	ldrmi	r3, [r6, #0]
 8006d5a:	3302      	addmi	r3, #2
 8006d5c:	6033      	strmi	r3, [r6, #0]
 8006d5e:	6825      	ldr	r5, [r4, #0]
 8006d60:	f015 0506 	ands.w	r5, r5, #6
 8006d64:	d106      	bne.n	8006d74 <_printf_common+0x48>
 8006d66:	f104 0a19 	add.w	sl, r4, #25
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	6832      	ldr	r2, [r6, #0]
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc26      	bgt.n	8006dc2 <_printf_common+0x96>
 8006d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d78:	1e13      	subs	r3, r2, #0
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	bf18      	it	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	0692      	lsls	r2, r2, #26
 8006d82:	d42b      	bmi.n	8006ddc <_printf_common+0xb0>
 8006d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d88:	4649      	mov	r1, r9
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c0      	blx	r8
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d01e      	beq.n	8006dd0 <_printf_common+0xa4>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	f003 0306 	and.w	r3, r3, #6
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf02      	ittt	eq
 8006d9e:	68e5      	ldreq	r5, [r4, #12]
 8006da0:	6833      	ldreq	r3, [r6, #0]
 8006da2:	1aed      	subeq	r5, r5, r3
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	bf0c      	ite	eq
 8006da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dac:	2500      	movne	r5, #0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bfc4      	itt	gt
 8006db2:	1a9b      	subgt	r3, r3, r2
 8006db4:	18ed      	addgt	r5, r5, r3
 8006db6:	2600      	movs	r6, #0
 8006db8:	341a      	adds	r4, #26
 8006dba:	42b5      	cmp	r5, r6
 8006dbc:	d11a      	bne.n	8006df4 <_printf_common+0xc8>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e008      	b.n	8006dd4 <_printf_common+0xa8>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4638      	mov	r0, r7
 8006dca:	47c0      	blx	r8
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_printf_common+0xac>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	3501      	adds	r5, #1
 8006dda:	e7c6      	b.n	8006d6a <_printf_common+0x3e>
 8006ddc:	18e1      	adds	r1, r4, r3
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	2030      	movs	r0, #48	; 0x30
 8006de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006de6:	4422      	add	r2, r4
 8006de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df0:	3302      	adds	r3, #2
 8006df2:	e7c7      	b.n	8006d84 <_printf_common+0x58>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa4>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d9      	b.n	8006dba <_printf_common+0x8e>
	...

08006e08 <_printf_i>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	7e0f      	ldrb	r7, [r1, #24]
 8006e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e10:	2f78      	cmp	r7, #120	; 0x78
 8006e12:	4691      	mov	r9, r2
 8006e14:	4680      	mov	r8, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e1e:	d807      	bhi.n	8006e30 <_printf_i+0x28>
 8006e20:	2f62      	cmp	r7, #98	; 0x62
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x32>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f000 80d4 	beq.w	8006fd2 <_printf_i+0x1ca>
 8006e2a:	2f58      	cmp	r7, #88	; 0x58
 8006e2c:	f000 80c0 	beq.w	8006fb0 <_printf_i+0x1a8>
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e38:	e03a      	b.n	8006eb0 <_printf_i+0xa8>
 8006e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e3e:	2b15      	cmp	r3, #21
 8006e40:	d8f6      	bhi.n	8006e30 <_printf_i+0x28>
 8006e42:	a101      	add	r1, pc, #4	; (adr r1, 8006e48 <_printf_i+0x40>)
 8006e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006e31 	.word	0x08006e31
 8006e54:	08006e31 	.word	0x08006e31
 8006e58:	08006e31 	.word	0x08006e31
 8006e5c:	08006e31 	.word	0x08006e31
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e31 	.word	0x08006e31
 8006e68:	08006e31 	.word	0x08006e31
 8006e6c:	08006e31 	.word	0x08006e31
 8006e70:	08006e31 	.word	0x08006e31
 8006e74:	08006fb9 	.word	0x08006fb9
 8006e78:	08006ee1 	.word	0x08006ee1
 8006e7c:	08006f73 	.word	0x08006f73
 8006e80:	08006e31 	.word	0x08006e31
 8006e84:	08006e31 	.word	0x08006e31
 8006e88:	08006fdb 	.word	0x08006fdb
 8006e8c:	08006e31 	.word	0x08006e31
 8006e90:	08006ee1 	.word	0x08006ee1
 8006e94:	08006e31 	.word	0x08006e31
 8006e98:	08006e31 	.word	0x08006e31
 8006e9c:	08006f7b 	.word	0x08006f7b
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	602a      	str	r2, [r5, #0]
 8006ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e09f      	b.n	8006ff4 <_printf_i+0x1ec>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	0607      	lsls	r7, r0, #24
 8006eba:	f103 0104 	add.w	r1, r3, #4
 8006ebe:	6029      	str	r1, [r5, #0]
 8006ec0:	d501      	bpl.n	8006ec6 <_printf_i+0xbe>
 8006ec2:	681e      	ldr	r6, [r3, #0]
 8006ec4:	e003      	b.n	8006ece <_printf_i+0xc6>
 8006ec6:	0646      	lsls	r6, r0, #25
 8006ec8:	d5fb      	bpl.n	8006ec2 <_printf_i+0xba>
 8006eca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	da03      	bge.n	8006eda <_printf_i+0xd2>
 8006ed2:	232d      	movs	r3, #45	; 0x2d
 8006ed4:	4276      	negs	r6, r6
 8006ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eda:	485a      	ldr	r0, [pc, #360]	; (8007044 <_printf_i+0x23c>)
 8006edc:	230a      	movs	r3, #10
 8006ede:	e012      	b.n	8006f06 <_printf_i+0xfe>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	6029      	str	r1, [r5, #0]
 8006ee8:	0605      	lsls	r5, r0, #24
 8006eea:	d501      	bpl.n	8006ef0 <_printf_i+0xe8>
 8006eec:	681e      	ldr	r6, [r3, #0]
 8006eee:	e002      	b.n	8006ef6 <_printf_i+0xee>
 8006ef0:	0641      	lsls	r1, r0, #25
 8006ef2:	d5fb      	bpl.n	8006eec <_printf_i+0xe4>
 8006ef4:	881e      	ldrh	r6, [r3, #0]
 8006ef6:	4853      	ldr	r0, [pc, #332]	; (8007044 <_printf_i+0x23c>)
 8006ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8006efa:	bf0c      	ite	eq
 8006efc:	2308      	moveq	r3, #8
 8006efe:	230a      	movne	r3, #10
 8006f00:	2100      	movs	r1, #0
 8006f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f06:	6865      	ldr	r5, [r4, #4]
 8006f08:	60a5      	str	r5, [r4, #8]
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	bfa2      	ittt	ge
 8006f0e:	6821      	ldrge	r1, [r4, #0]
 8006f10:	f021 0104 	bicge.w	r1, r1, #4
 8006f14:	6021      	strge	r1, [r4, #0]
 8006f16:	b90e      	cbnz	r6, 8006f1c <_printf_i+0x114>
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	d04b      	beq.n	8006fb4 <_printf_i+0x1ac>
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f22:	fb03 6711 	mls	r7, r3, r1, r6
 8006f26:	5dc7      	ldrb	r7, [r0, r7]
 8006f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f2c:	4637      	mov	r7, r6
 8006f2e:	42bb      	cmp	r3, r7
 8006f30:	460e      	mov	r6, r1
 8006f32:	d9f4      	bls.n	8006f1e <_printf_i+0x116>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d10b      	bne.n	8006f50 <_printf_i+0x148>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	07de      	lsls	r6, r3, #31
 8006f3c:	d508      	bpl.n	8006f50 <_printf_i+0x148>
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	6861      	ldr	r1, [r4, #4]
 8006f42:	4299      	cmp	r1, r3
 8006f44:	bfde      	ittt	le
 8006f46:	2330      	movle	r3, #48	; 0x30
 8006f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f50:	1b52      	subs	r2, r2, r5
 8006f52:	6122      	str	r2, [r4, #16]
 8006f54:	f8cd a000 	str.w	sl, [sp]
 8006f58:	464b      	mov	r3, r9
 8006f5a:	aa03      	add	r2, sp, #12
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f7ff fee4 	bl	8006d2c <_printf_common>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d14a      	bne.n	8006ffe <_printf_i+0x1f6>
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	b004      	add	sp, #16
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f043 0320 	orr.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	4833      	ldr	r0, [pc, #204]	; (8007048 <_printf_i+0x240>)
 8006f7c:	2778      	movs	r7, #120	; 0x78
 8006f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	6829      	ldr	r1, [r5, #0]
 8006f86:	061f      	lsls	r7, r3, #24
 8006f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f8c:	d402      	bmi.n	8006f94 <_printf_i+0x18c>
 8006f8e:	065f      	lsls	r7, r3, #25
 8006f90:	bf48      	it	mi
 8006f92:	b2b6      	uxthmi	r6, r6
 8006f94:	07df      	lsls	r7, r3, #31
 8006f96:	bf48      	it	mi
 8006f98:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9c:	6029      	str	r1, [r5, #0]
 8006f9e:	bf48      	it	mi
 8006fa0:	6023      	strmi	r3, [r4, #0]
 8006fa2:	b91e      	cbnz	r6, 8006fac <_printf_i+0x1a4>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	f023 0320 	bic.w	r3, r3, #32
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	2310      	movs	r3, #16
 8006fae:	e7a7      	b.n	8006f00 <_printf_i+0xf8>
 8006fb0:	4824      	ldr	r0, [pc, #144]	; (8007044 <_printf_i+0x23c>)
 8006fb2:	e7e4      	b.n	8006f7e <_printf_i+0x176>
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	e7bd      	b.n	8006f34 <_printf_i+0x12c>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	6826      	ldr	r6, [r4, #0]
 8006fbc:	6961      	ldr	r1, [r4, #20]
 8006fbe:	1d18      	adds	r0, r3, #4
 8006fc0:	6028      	str	r0, [r5, #0]
 8006fc2:	0635      	lsls	r5, r6, #24
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0x1c4>
 8006fc8:	6019      	str	r1, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0x1ca>
 8006fcc:	0670      	lsls	r0, r6, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0x1c0>
 8006fd0:	8019      	strh	r1, [r3, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	4615      	mov	r5, r2
 8006fd8:	e7bc      	b.n	8006f54 <_printf_i+0x14c>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	1d1a      	adds	r2, r3, #4
 8006fde:	602a      	str	r2, [r5, #0]
 8006fe0:	681d      	ldr	r5, [r3, #0]
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7f9 f8fa 	bl	80001e0 <memchr>
 8006fec:	b108      	cbz	r0, 8006ff2 <_printf_i+0x1ea>
 8006fee:	1b40      	subs	r0, r0, r5
 8006ff0:	6060      	str	r0, [r4, #4]
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ffc:	e7aa      	b.n	8006f54 <_printf_i+0x14c>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	462a      	mov	r2, r5
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d0ad      	beq.n	8006f68 <_printf_i+0x160>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	079b      	lsls	r3, r3, #30
 8007010:	d413      	bmi.n	800703a <_printf_i+0x232>
 8007012:	68e0      	ldr	r0, [r4, #12]
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	4298      	cmp	r0, r3
 8007018:	bfb8      	it	lt
 800701a:	4618      	movlt	r0, r3
 800701c:	e7a6      	b.n	8006f6c <_printf_i+0x164>
 800701e:	2301      	movs	r3, #1
 8007020:	4632      	mov	r2, r6
 8007022:	4649      	mov	r1, r9
 8007024:	4640      	mov	r0, r8
 8007026:	47d0      	blx	sl
 8007028:	3001      	adds	r0, #1
 800702a:	d09d      	beq.n	8006f68 <_printf_i+0x160>
 800702c:	3501      	adds	r5, #1
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	9903      	ldr	r1, [sp, #12]
 8007032:	1a5b      	subs	r3, r3, r1
 8007034:	42ab      	cmp	r3, r5
 8007036:	dcf2      	bgt.n	800701e <_printf_i+0x216>
 8007038:	e7eb      	b.n	8007012 <_printf_i+0x20a>
 800703a:	2500      	movs	r5, #0
 800703c:	f104 0619 	add.w	r6, r4, #25
 8007040:	e7f5      	b.n	800702e <_printf_i+0x226>
 8007042:	bf00      	nop
 8007044:	080073b1 	.word	0x080073b1
 8007048:	080073c2 	.word	0x080073c2

0800704c <memmove>:
 800704c:	4288      	cmp	r0, r1
 800704e:	b510      	push	{r4, lr}
 8007050:	eb01 0402 	add.w	r4, r1, r2
 8007054:	d902      	bls.n	800705c <memmove+0x10>
 8007056:	4284      	cmp	r4, r0
 8007058:	4623      	mov	r3, r4
 800705a:	d807      	bhi.n	800706c <memmove+0x20>
 800705c:	1e43      	subs	r3, r0, #1
 800705e:	42a1      	cmp	r1, r4
 8007060:	d008      	beq.n	8007074 <memmove+0x28>
 8007062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706a:	e7f8      	b.n	800705e <memmove+0x12>
 800706c:	4402      	add	r2, r0
 800706e:	4601      	mov	r1, r0
 8007070:	428a      	cmp	r2, r1
 8007072:	d100      	bne.n	8007076 <memmove+0x2a>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800707e:	e7f7      	b.n	8007070 <memmove+0x24>

08007080 <_sbrk_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d06      	ldr	r5, [pc, #24]	; (800709c <_sbrk_r+0x1c>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	602b      	str	r3, [r5, #0]
 800708c:	f7f9 fe58 	bl	8000d40 <_sbrk>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_sbrk_r+0x1a>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_sbrk_r+0x1a>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	20001638 	.word	0x20001638

080070a0 <_realloc_r>:
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	4680      	mov	r8, r0
 80070a6:	4614      	mov	r4, r2
 80070a8:	460e      	mov	r6, r1
 80070aa:	b921      	cbnz	r1, 80070b6 <_realloc_r+0x16>
 80070ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	4611      	mov	r1, r2
 80070b2:	f7ff bc57 	b.w	8006964 <_malloc_r>
 80070b6:	b92a      	cbnz	r2, 80070c4 <_realloc_r+0x24>
 80070b8:	f7ff fbe8 	bl	800688c <_free_r>
 80070bc:	4625      	mov	r5, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	f000 f81b 	bl	80070fe <_malloc_usable_size_r>
 80070c8:	4284      	cmp	r4, r0
 80070ca:	4607      	mov	r7, r0
 80070cc:	d802      	bhi.n	80070d4 <_realloc_r+0x34>
 80070ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070d2:	d812      	bhi.n	80070fa <_realloc_r+0x5a>
 80070d4:	4621      	mov	r1, r4
 80070d6:	4640      	mov	r0, r8
 80070d8:	f7ff fc44 	bl	8006964 <_malloc_r>
 80070dc:	4605      	mov	r5, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0ed      	beq.n	80070be <_realloc_r+0x1e>
 80070e2:	42bc      	cmp	r4, r7
 80070e4:	4622      	mov	r2, r4
 80070e6:	4631      	mov	r1, r6
 80070e8:	bf28      	it	cs
 80070ea:	463a      	movcs	r2, r7
 80070ec:	f7ff fbc0 	bl	8006870 <memcpy>
 80070f0:	4631      	mov	r1, r6
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7ff fbca 	bl	800688c <_free_r>
 80070f8:	e7e1      	b.n	80070be <_realloc_r+0x1e>
 80070fa:	4635      	mov	r5, r6
 80070fc:	e7df      	b.n	80070be <_realloc_r+0x1e>

080070fe <_malloc_usable_size_r>:
 80070fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007102:	1f18      	subs	r0, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfbc      	itt	lt
 8007108:	580b      	ldrlt	r3, [r1, r0]
 800710a:	18c0      	addlt	r0, r0, r3
 800710c:	4770      	bx	lr
	...

08007110 <_init>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr

0800711c <_fini>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr
